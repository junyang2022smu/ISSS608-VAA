[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html",
    "title": "Hands-On Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, they will be loaded into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#plotting-charts",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#plotting-charts",
    "title": "Hands-On Exercise 1",
    "section": "Plotting Charts",
    "text": "Plotting Charts\n\nBar Chart\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nDot Plot\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize=0.5) +\n  scale_y_continuous(NULL,\n                     breaks=NULL)\n\n\n\n\n\n\nHistogram 1\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue')\n\n\n\n\n\n\nHistogram 2\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bins=20,\n                 color='white')\n\n\n\n\n\n\nKernel Density Estimate\n\nggplot(data=exam_data, \n       aes(x=MATHS,\n           colour=GENDER)) +\n  geom_density()\n\n\n\n\n\n\nBoxplot\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\nViolin Plot\nUseful to compare several distributions.\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_violin()\n\n\n\n\n\n\nScatterplot\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nCombining Geom Types\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(position='jitter',\n             size=0.5)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#adding-statistics",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#adding-statistics",
    "title": "Hands-On Exercise 1",
    "section": "Adding Statistics",
    "text": "Adding Statistics\n\nAdding mean to boxplot\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom='point',\n               fun='mean',\n               colour='red',\n               size=4)\n\n\n\n\n\n\nAdding best fit curve to scatterplot\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n       y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              size=0.5)\n\n`geom_smooth()` using formula 'y ~ x'"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#facets",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#facets",
    "title": "Hands-On Exercise 1",
    "section": "Facets",
    "text": "Facets\n\nFacet Wrap\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_wrap(~CLASS)\n\n\n\n\n\n\nFacet Grid\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  facet_grid(~CLASS)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#coordinates",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#coordinates",
    "title": "Hands-On Exercise 1",
    "section": "Coordinates",
    "text": "Coordinates\n\nFlipping vertical bar chart to horizontal\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\nChanging axis ranges\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula 'y ~ x'"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#themes",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#themes",
    "title": "Hands-On Exercise 1",
    "section": "Themes",
    "text": "Themes\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html",
    "title": "Hands-On Exercise 2",
    "section": "",
    "text": "The code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment:\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse) \n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#annotations-without-overlapping-labels",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#annotations-without-overlapping-labels",
    "title": "Hands-On Exercise 2",
    "section": "Annotations without overlapping labels",
    "text": "Annotations without overlapping labels\n\nAnnotation using default ggplot geom_label()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label=ID)) +\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for Primary 3 students\")\n\nWarning: Ignoring unknown parameters: linewidth\n\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n\nAnnotation using ggrepel geom_text_repel()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label_repel(aes(label=ID)) +\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for Primary 3 students\")\n\nWarning: Ignoring unknown parameters: linewidth\n\n\n`geom_smooth()` using formula 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#beyond-ggplot2-themes",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#beyond-ggplot2-themes",
    "title": "Hands-On Exercise 2",
    "section": "Beyond ggplot2 Themes",
    "text": "Beyond ggplot2 Themes\n\nUsing default ggplot2 theme_gray theme\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='grey75') +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\nUsing ‘Economist’ theme from ggthemes\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='grey75') +\n  theme_economist() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\nUsing hrbrthemes package\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='grey75') +\n  theme_ipsum() +\n  ggtitle(\"Distribution of Maths scores\")\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family not\nfound in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#plotting-multiple-graphs-using-patchwork",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#plotting-multiple-graphs-using-patchwork",
    "title": "Hands-On Exercise 2",
    "section": "Plotting Multiple Graphs using patchwork",
    "text": "Plotting Multiple Graphs using patchwork\n\nInitial Graphs\n\np1 <- ggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(binwidth=5,\n                 boundary=100,\n                 color='grey75') +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\n\np2 <- ggplot(data=exam_data,\n       aes(x=ENGLISH)) +\n  geom_histogram(binwidth=5,\n                 boundary=100,\n                 color='grey75') +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\np3 <- ggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for Primary 3 students\")\n\nWarning: Ignoring unknown parameters: linewidth\n\np3\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n\nTwo Graphs\n\np1 + p2\n\n\n\n\n\n\nThree Graphs\n\n(p1 / p2) | p3 +\n  plot_annotation(tag_levels='I')\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n\nInset another graph\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula 'y ~ x'\n\n\n\n\n\n\n\nCombining with themes\n\npatchwork <- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula 'y ~ x'"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html",
    "title": "Hands-On Exercise 3",
    "section": "",
    "text": "In this Hands-On Exercise, we explore how to add interactive elements and animations to visualisations using appropriate R packages."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started",
    "title": "Hands-On Exercise 3",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\nThe code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment:\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\n\nImport the Data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#ggigraph-methods",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#ggigraph-methods",
    "title": "Hands-On Exercise 3",
    "section": "ggigraph Methods",
    "text": "ggigraph Methods\n\nTooltips\nThe following code generates an interactive version of a dotplot, and displays the ID value (student ID) when the cursor hovers over a given dot.\n\np <- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip=ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nThe following code shows how the tooltip content can be customised:\n\nexam_data$tooltip <- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n\",\n  \"Class = \", exam_data$CLASS\n))\n\np <- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip=tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nTooltips can be formatted using CSS, like so:\n\ntooltip_css <- \"background-color:white; font-style:bold; color: black\"\n\np <- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip=ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(opts_tooltip(css = tooltip_css))\n)\n\n\n\n\n\nTooltips can even be customised using a function, for example to show computed statistics:\n\ntooltip <- function(y, ymax, accuracy=0.01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point <- ggplot(data=exam_data,\n                   aes(x=RACE)) +\n  stat_summary(aes(y=MATHS,\n                   tooltip = after_stat(tooltip(y,ymax))),\n               fun.data = 'mean_se',\n               geom = GeomInteractiveCol,\n               fill = 'light blue'\n               ) +\n  stat_summary(aes(y=MATHS),\n               fun.data = mean_se,\n               geom = 'errorbar', width = 0.2, size = 0.2\n    \n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nHover effect (using data_id)\nHere, when we hover over a data point, all other points with the same CLASS value (i.e. classmates) will be highlighted as well.\n\np <- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot') +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nBy default, the highlighted dots are shown in orange. This can be changed using CSS:\n\np <- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot') +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\nCombining tooltips and hover effect\nTooltips and hover effect can be combined, so that when we mouse over a data point, all the data points of the same class will be highlighted, and at the same time the name of the class will also be shown:\n\np <- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\nCoordinated multiple views\nBy combining ggiraph and patchwork, we can create coordinated graphs such that when a data point in the first graph is selected, the corresponding data point in the second graph will also be highlighted.\n\np1 <- ggplot(data=exam_data,\n             aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL, breaks = NULL)\n\np2 <- ggplot(data=exam_data,\n             aes(x=ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill:#202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n       )\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-web-data-viz-using-plotly",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-web-data-viz-using-plotly",
    "title": "Hands-On Exercise 3",
    "section": "Interactive Web Data Viz using plotly",
    "text": "Interactive Web Data Viz using plotly\n\nSimple scatter plot using plot_ly() method\n\nplot_ly(data = exam_data,\n        x = ~MATHS,\n        y = ~ENGLISH,\n        color = ~CLASS)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n\n\n\n\n\n\n\nSame scatter plot using plotly: ggplotly() method\n\np <- ggplot(data=exam_data,\n            aes(x=MATHS,\n                y=ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\n\nCoordinated multiple views using ggplotly()\n\nd <- highlight_key(exam_data)\n\np1 <- ggplot(data=d,\n            aes(x=MATHS,\n                y=ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d,\n            aes(x=MATHS,\n                y=SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-data-tables",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-data-tables",
    "title": "Hands-On Exercise 3",
    "section": "Interactive Data Tables",
    "text": "Interactive Data Tables\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#linking-data-table-with-plot",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#linking-data-table-with-plot",
    "title": "Hands-On Exercise 3",
    "section": "Linking data table with plot",
    "text": "Linking data table with plot\n\nd <- highlight_key(exam_data)\np <- ggplot(d,\n            aes(ENGLISH, MATHS)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p), 'plotly_selected')\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths=5)\n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started-1",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started-1",
    "title": "Hands-On Exercise 3",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\nInstalling package into 'C:/Users/yang_/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\npackage 'gifski' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yang_\\AppData\\Local\\Temp\\Rtmpy6Q5gL\\downloaded_packages\n\n\n\ngifski installed\n\n\nWarning: package 'gifski' was built under R version 4.2.3\n\n\nInstalling package into 'C:/Users/yang_/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\npackage 'gapminder' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yang_\\AppData\\Local\\Temp\\Rtmpy6Q5gL\\downloaded_packages\n\n\n\ngapminder installed\n\n\nWarning: package 'gapminder' was built under R version 4.2.3\n\n\n\n\nImport the Data\n\ncols <- c('Country', 'Continent')\nglobalPop <- read_xls('data/GlobalPopulation.xls',\n                      sheet='Data') %>%\n  mutate(across(all_of(cols), ~ factor(.x))) %>%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-gganimate",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-gganimate",
    "title": "Hands-On Exercise 3",
    "section": "Adding animations using gganimate",
    "text": "Adding animations using gganimate\n\nPopulation bubble plot\nStart with a static bubble plot:\n\nggplot(data=globalPop,\n       aes(x=Old,\n           y=Young,\n           size=Population,\n           colour=Country)) +\n  geom_point(alpha = 0.7,\n            show.legend = FALSE) +\n  scale_color_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young')\n\n\n\n\nAdd animation by creating transitions across Years:\n\nggplot(data=globalPop,\n       aes(x=Old,\n           y=Young,\n           size=Population,\n           colour=Country)) +\n  geom_point(alpha = 0.7,\n            show.legend = FALSE) +\n  scale_color_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-plotly",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-plotly",
    "title": "Hands-On Exercise 3",
    "section": "Adding animations using plotly",
    "text": "Adding animations using plotly\n\nUsing ggplotly() method\n\ngg <- ggplot(data=globalPop,\n             aes(x=Old,\n                 y=Young,\n                 size=Population,\n                 colour=Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(x = '% Aged',\n       y = '% Young')\n\nWarning: Ignoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] <- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\nUsing plot_ly() method\n\nbp <- globalPop %>%\n  plot_ly(x = ~Old,\n          y = ~Young,\n          size = ~Population,\n          color = ~Continent,\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = 'text',\n          type = 'scatter',\n          mode = 'markers')\n\nbp"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics & Applications",
    "section": "",
    "text": "This is a student website for ISSS608 exercise submissions."
  },
  {
    "objectID": "in_class_ex/in_class_ex_01/in_class_ex_01.html",
    "href": "in_class_ex/in_class_ex_01/in_class_ex_01.html",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\nggplot(exam_data,\n       aes(y=RACE)) +\n  geom_bar() +\n  theme_minimal() + \n  theme(panel.background = element_rect(fill='lightblue', colour='lightblue'),\n        panel.grid.major = element_line(color='white'))"
  },
  {
    "objectID": "in_class_ex/in_class_ex_01/in_class_ex_01.html#designing-data-driven-graphics-for-analysis",
    "href": "in_class_ex/in_class_ex_01/in_class_ex_01.html#designing-data-driven-graphics-for-analysis",
    "title": "In-Class Exercise 1",
    "section": "Designing Data-Driven Graphics for Analysis",
    "text": "Designing Data-Driven Graphics for Analysis\n\nI. Bar Chart Makeover\n\nBefore\ny-axis labels is not clear. Bars are not sorted. Frequency values not available.\n\nggplot(exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nAfter\nThe y-axis has a clearer label, the bars are sorted by frequency in descending order, and frequency and percentage labels are provided for each bar.\n\nggplot(exam_data,\n       aes(x=fct_infreq(RACE))) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), sprintf(' (%.1f%%)', prop*100)), group=1), \n            stat='count', \n            vjust=-0.5, \n            colour='black') +\n  labs(x='Race', y='No. of Pupils') +\n  scale_y_continuous(limits=c(0,220))\n\n\n\n\n\n\n\nII. Histogram Makeover\n\nBefore\nFill and line colours make it difficult to see the individual bins. No mean or median reference lines.\n\nggplot(exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20)\n\n\n\n\n\n\nAfter\nChanged fill and line colours. Added mean and median reference lines (red and black respectively).\n\nggplot(exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue') +\n  geom_vline(xintercept=mean(exam_data$MATHS), color='red', linetype='dashed', size=1) +\n  geom_vline(xintercept=median(exam_data$MATHS), color='black', linetype='dashed', size=1)\n\n\n\n\n\n\n\nIII. Histogram Makeover 2\n\nBefore\nHistograms show distribution of English scores by gender, but without context of all pupils.\n\nggplot(exam_data,\n       aes(x=ENGLISH)) +\n  geom_histogram(bins=25) +\n  facet_wrap(~GENDER)\n\n\n\n\n\n\nAfter\nThe histogram of all pupils is added as a light background to provide context of how each gender scores compared to the overall performance.\n\nexam_data_bg <- exam_data[5]\n\nggplot(exam_data,\n       aes(x=ENGLISH, fill=GENDER)) +\n  geom_histogram(data=exam_data_bg, fill='grey', alpha=0.5) +\n  geom_histogram(colour='black') +\n  facet_wrap(~GENDER) +\n  guides(fill='none') +\n  theme_bw()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nIV. Scatterplot Makeover\n\nBefore\nScatterplot of English vs Maths scores. The axis have different scales even though they have the same units, and there are no reference marks indicating the (passing) score of 50%.\n\nggplot(exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nAfter\nBoth axes are standardised to the same scale. Reference lines are added to indicate scores of 50%.\n\nggplot(exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_vline(xintercept=50, color='grey70', linetype='dashed', size=1) +\n  geom_hline(yintercept=50, color='grey70', linetype='dashed', size=1) +\n  geom_point() +\n  coord_fixed(xlim=c(0,100),ylim=c(0,100))"
  }
]