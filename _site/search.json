[
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html",
    "title": "Hands-On Exercise 2",
    "section": "",
    "text": "The code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment:\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#getting-started",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#getting-started",
    "title": "Hands-On Exercise 2",
    "section": "",
    "text": "The code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment:\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#annotations-without-overlapping-labels",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#annotations-without-overlapping-labels",
    "title": "Hands-On Exercise 2",
    "section": "Annotations without overlapping labels",
    "text": "Annotations without overlapping labels\n\nAnnotation using default ggplot geom_label()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label=ID)) +\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for Primary 3 students\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nAnnotation using ggrepel geom_text_repel()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label_repel(aes(label=ID)) +\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for Primary 3 students\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#beyond-ggplot2-themes",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#beyond-ggplot2-themes",
    "title": "Hands-On Exercise 2",
    "section": "Beyond ggplot2 Themes",
    "text": "Beyond ggplot2 Themes\n\nUsing default ggplot2 theme_gray theme\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='grey75') +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\nUsing ‘Economist’ theme from ggthemes\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='grey75') +\n  theme_economist() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\nUsing hrbrthemes package\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='grey75') +\n  theme_ipsum() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#plotting-multiple-graphs-using-patchwork",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#plotting-multiple-graphs-using-patchwork",
    "title": "Hands-On Exercise 2",
    "section": "Plotting Multiple Graphs using patchwork",
    "text": "Plotting Multiple Graphs using patchwork\n\nInitial Graphs\n\np1 &lt;- ggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(binwidth=5,\n                 boundary=100,\n                 color='grey75') +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data,\n       aes(x=ENGLISH)) +\n  geom_histogram(binwidth=5,\n                 boundary=100,\n                 color='grey75') +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for Primary 3 students\")\n\np3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nTwo Graphs\n\np1 + p2\n\n\n\n\n\n\nThree Graphs\n\n(p1 / p2) | p3 +\n  plot_annotation(tag_levels='I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nInset another graph\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCombining with themes\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html",
    "title": "Hands-On Exercise 3",
    "section": "",
    "text": "In this Hands-On Exercise, we explore how to add interactive elements and animations to visualisations using appropriate R packages."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started",
    "title": "Hands-On Exercise 3",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\nThe code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment:\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\n\nImport the Data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#ggigraph-methods",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#ggigraph-methods",
    "title": "Hands-On Exercise 3",
    "section": "ggigraph Methods",
    "text": "ggigraph Methods\n\nTooltips\nThe following code generates an interactive version of a dotplot, and displays the ID value (student ID) when the cursor hovers over a given dot.\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip=ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nThe following code shows how the tooltip content can be customised:\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n\",\n  \"Class = \", exam_data$CLASS\n))\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip=tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nTooltips can be formatted using CSS, like so:\n\ntooltip_css &lt;- \"background-color:white; font-style:bold; color: black\"\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip=ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(opts_tooltip(css = tooltip_css))\n)\n\n\n\n\n\nTooltips can even be customised using a function, for example to show computed statistics:\n\ntooltip &lt;- function(y, ymax, accuracy=0.01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data,\n                   aes(x=RACE)) +\n  stat_summary(aes(y=MATHS,\n                   tooltip = after_stat(tooltip(y,ymax))),\n               fun.data = 'mean_se',\n               geom = GeomInteractiveCol,\n               fill = 'light blue'\n               ) +\n  stat_summary(aes(y=MATHS),\n               fun.data = mean_se,\n               geom = 'errorbar', width = 0.2, size = 0.2\n    \n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nHover effect (using data_id)\nHere, when we hover over a data point, all other points with the same CLASS value (i.e. classmates) will be highlighted as well.\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot') +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nBy default, the highlighted dots are shown in orange. This can be changed using CSS:\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot') +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\nCombining tooltips and hover effect\nTooltips and hover effect can be combined, so that when we mouse over a data point, all the data points of the same class will be highlighted, and at the same time the name of the class will also be shown:\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\nCoordinated multiple views\nBy combining ggiraph and patchwork, we can create coordinated graphs such that when a data point in the first graph is selected, the corresponding data point in the second graph will also be highlighted.\n\np1 &lt;- ggplot(data=exam_data,\n             aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL, breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data,\n             aes(x=ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill:#202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n       )\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-web-data-viz-using-plotly",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-web-data-viz-using-plotly",
    "title": "Hands-On Exercise 3",
    "section": "Interactive Web Data Viz using plotly",
    "text": "Interactive Web Data Viz using plotly\n\nSimple scatter plot using plot_ly() method\n\nplot_ly(data = exam_data,\n        x = ~MATHS,\n        y = ~ENGLISH,\n        color = ~CLASS)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n\n\n\n\n\n\n\nSame scatter plot using plotly: ggplotly() method\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS,\n                y=ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\n\nCoordinated multiple views using ggplotly()\n\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data=d,\n            aes(x=MATHS,\n                y=ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d,\n            aes(x=MATHS,\n                y=SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-data-tables",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-data-tables",
    "title": "Hands-On Exercise 3",
    "section": "Interactive Data Tables",
    "text": "Interactive Data Tables\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#linking-data-table-with-plot",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#linking-data-table-with-plot",
    "title": "Hands-On Exercise 3",
    "section": "Linking data table with plot",
    "text": "Linking data table with plot\n\nd &lt;- highlight_key(exam_data)\np &lt;- ggplot(d,\n            aes(ENGLISH, MATHS)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p), 'plotly_selected')\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths=5)\n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started-1",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started-1",
    "title": "Hands-On Exercise 3",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\nImport the Data\n\ncols &lt;- c('Country', 'Continent')\nglobalPop &lt;- read_xls('data/GlobalPopulation.xls',\n                      sheet='Data') %&gt;%\n  mutate(across(all_of(cols), ~ factor(.x))) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-gganimate",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-gganimate",
    "title": "Hands-On Exercise 3",
    "section": "Adding animations using gganimate",
    "text": "Adding animations using gganimate\n\nPopulation bubble plot\nStart with a static bubble plot:\n\nggplot(data=globalPop,\n       aes(x=Old,\n           y=Young,\n           size=Population,\n           colour=Country)) +\n  geom_point(alpha = 0.7,\n            show.legend = FALSE) +\n  scale_color_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young')\n\n\n\n\nAdd animation by creating transitions across Years:\n\nggplot(data=globalPop,\n       aes(x=Old,\n           y=Young,\n           size=Population,\n           colour=Country)) +\n  geom_point(alpha = 0.7,\n            show.legend = FALSE) +\n  scale_color_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-plotly",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-plotly",
    "title": "Hands-On Exercise 3",
    "section": "Adding animations using plotly",
    "text": "Adding animations using plotly\n\nUsing ggplotly() method\n\ngg &lt;- ggplot(data=globalPop,\n             aes(x=Old,\n                 y=Young,\n                 size=Population,\n                 colour=Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(x = '% Aged',\n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\nUsing plot_ly() method\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~Young,\n          size = ~Population,\n          color = ~Continent,\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = 'text',\n          type = 'scatter',\n          mode = 'markers')\n\nbp"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html",
    "title": "Hands-On Exercise 4",
    "section": "",
    "text": "In this Hands-On Exercise, we explore statistical analysis and uncertainty using visual analytics."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started",
    "title": "Hands-On Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nImport the Data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#one-sample-test",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#one-sample-test",
    "title": "Hands-On Exercise 4",
    "section": "One-sample test",
    "text": "One-sample test\nThe following code uses the gghistostats() method to build a visual of a one-sample test for English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = 'bayes',\n  test.value = 60,\n  xlab = 'English scores'\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#two-sample-means-test",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#two-sample-means-test",
    "title": "Hands-On Exercise 4",
    "section": "Two-sample means test",
    "text": "Two-sample means test\nThe following code uses the ggbetweenstats() method to build a visual for a two-sample means test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  type = 'np',\n  messages = FALSE\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#one-way-anova-test",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#one-way-anova-test",
    "title": "Hands-On Exercise 4",
    "section": "One-way ANOVA test",
    "text": "One-way ANOVA test\nThe following code uses the ggbetweenstats() method to build a visual for an ANOVA test of English scores by race.\n\nggbetweenstats(\n  data = exam_data,\n  x = RACE,\n  y = ENGLISH,\n  mean.ci = TRUE,\n  pairwise.comparisons = TRUE,\n  pairwise.display = 's',\n  p.adjust.method = 'fdr',\n  messages = FALSE\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#test-for-significance-of-correlation",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#test-for-significance-of-correlation",
    "title": "Hands-On Exercise 4",
    "section": "Test for significance of correlation",
    "text": "Test for significance of correlation\nThe following code uses the ggscatterstats() method to build a visual for testing the significance of correlation between Maths and English scores.\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#test-for-significance-of-association",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#test-for-significance-of-association",
    "title": "Hands-On Exercise 4",
    "section": "Test for significance of association",
    "text": "Test for significance of association\nThe following code uses the ggbarstats() method to build a visual for testing the significance of association between binned Maths scores and gender.\n\nexam_binned <- exam_data %>%\n  mutate(MATHS_binned =\n           cut(MATHS, breaks = c(0,60,75,85,100)))\n\n\nggbarstats(\n  data = exam_binned,\n  x = MATHS_binned,\n  y = GENDER\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-1",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-1",
    "title": "Hands-On Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\nImport the Data\n\ncar_resale <- read_xls('data/ToyotaCorolla.xls', 'data')\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#multiple-regression-model",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#multiple-regression-model",
    "title": "Hands-On Exercise 4",
    "section": "Multiple Regression Model",
    "text": "Multiple Regression Model\n\nCreate the Model\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nCheck for Multicollinearity\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\nCheck for Normality\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n <- check_normality(model1)\nplot(check_n)\n\n\n\n\n\n\nCheck for homogeneity of variances\n\ncheck_h <- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\nComplete check\n\ncheck_model(model1)\n\n\n\n\n\n\nVisualising regression parameters using plot()\n\nplot(parameters(model1))\n\n\n\n\n\n\nVisualising regression parameters using ggcoefstats()\n\nggcoefstats(model1, output='plot')"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-2",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-2",
    "title": "Hands-On Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate)\n\n\n\nImport the Data\n\nexam <- read_csv(\"data/Exam_data.csv\",\n                 show_col_types = FALSE)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#uncertainty-of-point-estimates",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#uncertainty-of-point-estimates",
    "title": "Hands-On Exercise 4",
    "section": "Uncertainty of Point Estimates",
    "text": "Uncertainty of Point Estimates\nCompute the count of observations, mean, standard deviation and standard error of Maths scores by RACE:\n\nmy_sum <- exam %>%\n  group_by(RACE) %>%\n  summarise(\n    n = n(),\n    mean = mean(MATHS),\n    sd = sd(MATHS)\n  ) %>%\n  mutate(\n    se = sd/sqrt(n-1)\n  )\n\n\nknitr::kable(head(my_sum),\n             format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\n\nStandard error of mean Maths scores\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE,\n        ymin=mean-se,\n        ymax=mean+se),\n    width = 0.2,\n    color = 'black',\n    alpha = 0.9,\n    size = 0.5\n  ) +\n  geom_point(\n    aes(x=RACE,\n        y=mean),\n    stat = 'identity',\n    color = 'red',\n    size = 1.5,\n    alpha = 1\n  ) +\n  ggtitle(\"Standard error of mean Maths scores by Race\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n95% CI of mean Maths scores\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE,-mean),\n        ymin=mean-se*qnorm(1-0.025),\n        ymax=mean+se*qnorm(1-0.025)),\n    width = 0.2,\n    color = 'black',\n    alpha = 0.9,\n    size = 0.5\n  ) +\n  geom_point(\n    aes(x=reorder(RACE,-mean),\n        y=mean),\n    stat = 'identity',\n    color = 'red',\n    size = 1.5,\n    alpha = 1\n  ) +\n  ggtitle(\"95% confidence interval for mean Maths scores by Race\")\n\n\n\n\n\n\nInteractive error bars"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#visualising-uncertainty-using-ggdist-methods",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#visualising-uncertainty-using-ggdist-methods",
    "title": "Hands-On Exercise 4",
    "section": "Visualising uncertainty using ggdist methods",
    "text": "Visualising uncertainty using ggdist methods\n\nUsing stat_pointinterval()\n\nexam %>%\n  ggplot(aes(x = RACE,\n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals for mean Maths scores\",\n    subtitle = \"Mean Point + Multiple-interval plot\"\n  )\n\n\n\n\n\n\nUsing stat_gradientinterval()\n\nexam %>%\n  ggplot(aes(x = RACE,\n             y = MATHS)) +\n  stat_gradientinterval(\n    fill = 'skyblue',\n    show.legend = TRUE\n  ) +\n  labs(\n    title = \"Visualising confidence intervals for mean Maths scores\",\n    subtitle = \"Gradient + interval plot\"\n  )\n\nWarning: fill_type = \"gradient\" is not supported by the current graphics device.\n - Falling back to fill_type = \"segments\".\n - If you believe your current graphics device *does* support\n   fill_type = \"gradient\" but auto-detection failed, set that option\n   explicitly and consider reporting a bug.\n - See help(\"geom_slabinterval\") for more information.\n\n\n\n\n\n\n\nUsing Hypothetical Outcome Plots (HOPs)\n\nlibrary(ungeviz)\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)\n\nWarning in geom_hpline(data = sampler(25, group = RACE), height = 0.6, color =\n\"#D55E00\"): Ignoring unknown parameters: `height`\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-3",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-3",
    "title": "Hands-On Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\nInstalling package into 'C:/Users/yang_/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\npackage 'FunnelPlotR' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yang_\\AppData\\Local\\Temp\\Rtmp4gMnrC\\downloaded_packages\n\n\n\nFunnelPlotR installed\n\n\nWarning: package 'FunnelPlotR' was built under R version 4.2.3\n\n\n\n\nImport the Data\n\ncovid19 <- read_csv('data/COVID-19_DKI_Jakarta.csv', show_col_types = FALSE) %>%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#basic-funnel-plot-using-funnelplotr",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#basic-funnel-plot-using-funnelplotr",
    "title": "Hands-On Exercise 4",
    "section": "Basic Funnel Plot using FunnelPlotR",
    "text": "Basic Funnel Plot using FunnelPlotR\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\nFunnel Plot: Makeover 1\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",\n  x_range = c(0, 6500),\n  y_range = c(0, 0.05)\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nFunnel Plot: Makeover 2\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",\n  x_range = c(0, 6500),\n  y_range = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\"\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#building-funnel-plots-from-scratch",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#building-funnel-plots-from-scratch",
    "title": "Hands-On Exercise 4",
    "section": "Building Funnel Plots from Scratch",
    "text": "Building Funnel Plots from Scratch\n\nCompute derived fields\n\ndf <- covid19 %>%\n  mutate(rate = Death/Positive) %>%\n  mutate(rate.se = sqrt( (rate*(1-rate))/Positive )) %>%\n  filter(rate > 0)\n\n\nfit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\nCalculate lower and upper limits for 95% and 99.9% CI\n\nnumber.seq <- seq(1, max(df$Positive), 1)\nnumber.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI <- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\nPlot static funnel plot\n\np <- ggplot(data=df,\n            aes(x=Positive,\n                y=rate\n                )) +\n  geom_point(aes(label=`Sub-district`),\n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 200, y = 0.003, label = \"95%\", size = 3, colour = \"grey40\") +\n  annotate(\"text\", x = 500, y = 0.0, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\np\n\n\n\n\n\n\nAdding interactivity\n\nfp_ggplotly <- ggplotly(p,\n                        tooltip = c('label', 'x', 'y'))\n\nfp_ggplotly"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html",
    "title": "Hands-On Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, they will be loaded into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#getting-started",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#getting-started",
    "title": "Hands-On Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, they will be loaded into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#plotting-charts",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#plotting-charts",
    "title": "Hands-On Exercise 1",
    "section": "Plotting Charts",
    "text": "Plotting Charts\n\nBar Chart\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nDot Plot\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize=0.5) +\n  scale_y_continuous(NULL,\n                     breaks=NULL)\n\n\n\n\n\n\nHistogram 1\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue')\n\n\n\n\n\n\nHistogram 2\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bins=20,\n                 color='white')\n\n\n\n\n\n\nKernel Density Estimate\n\nggplot(data=exam_data, \n       aes(x=MATHS,\n           colour=GENDER)) +\n  geom_density()\n\n\n\n\n\n\nBoxplot\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\nViolin Plot\nUseful to compare several distributions.\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_violin()\n\n\n\n\n\n\nScatterplot\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nCombining Geom Types\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(position='jitter',\n             size=0.5)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#adding-statistics",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#adding-statistics",
    "title": "Hands-On Exercise 1",
    "section": "Adding Statistics",
    "text": "Adding Statistics\n\nAdding mean to boxplot\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom='point',\n               fun='mean',\n               colour='red',\n               size=4)\n\n\n\n\n\n\nAdding best fit curve to scatterplot\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n       y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#facets",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#facets",
    "title": "Hands-On Exercise 1",
    "section": "Facets",
    "text": "Facets\n\nFacet Wrap\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_wrap(~CLASS)\n\n\n\n\n\n\nFacet Grid\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  facet_grid(~CLASS)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#coordinates",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#coordinates",
    "title": "Hands-On Exercise 1",
    "section": "Coordinates",
    "text": "Coordinates\n\nFlipping vertical bar chart to horizontal\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\nChanging axis ranges\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#themes",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#themes",
    "title": "Hands-On Exercise 1",
    "section": "Themes",
    "text": "Themes\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics & Applications",
    "section": "",
    "text": "This is a student website for ISSS608 exercise submissions."
  },
  {
    "objectID": "in_class_ex/in_class_ex_01/in_class_ex_01.html",
    "href": "in_class_ex/in_class_ex_01/in_class_ex_01.html",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\nggplot(exam_data,\n       aes(y=RACE)) +\n  geom_bar() +\n  theme_minimal() + \n  theme(panel.background = element_rect(fill='lightblue', colour='lightblue'),\n        panel.grid.major = element_line(color='white'))"
  },
  {
    "objectID": "in_class_ex/in_class_ex_01/in_class_ex_01.html#getting-started",
    "href": "in_class_ex/in_class_ex_01/in_class_ex_01.html#getting-started",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\nggplot(exam_data,\n       aes(y=RACE)) +\n  geom_bar() +\n  theme_minimal() + \n  theme(panel.background = element_rect(fill='lightblue', colour='lightblue'),\n        panel.grid.major = element_line(color='white'))"
  },
  {
    "objectID": "in_class_ex/in_class_ex_01/in_class_ex_01.html#designing-data-driven-graphics-for-analysis",
    "href": "in_class_ex/in_class_ex_01/in_class_ex_01.html#designing-data-driven-graphics-for-analysis",
    "title": "In-Class Exercise 1",
    "section": "Designing Data-Driven Graphics for Analysis",
    "text": "Designing Data-Driven Graphics for Analysis\n\nI. Bar Chart Makeover\n\nBefore\ny-axis labels is not clear. Bars are not sorted. Frequency values not available.\n\nggplot(exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nAfter\nThe y-axis has a clearer label, the bars are sorted by frequency in descending order, and frequency and percentage labels are provided for each bar.\n\nggplot(exam_data,\n       aes(x=fct_infreq(RACE))) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), sprintf(' (%.1f%%)', prop*100)), group=1), \n            stat='count', \n            vjust=-0.5, \n            colour='black') +\n  labs(x='Race', y='No. of Pupils') +\n  scale_y_continuous(limits=c(0,220))\n\n\n\n\n\n\n\nII. Histogram Makeover\n\nBefore\nFill and line colours make it difficult to see the individual bins. No mean or median reference lines.\n\nggplot(exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20)\n\n\n\n\n\n\nAfter\nChanged fill and line colours. Added mean and median reference lines (red and black respectively).\n\nggplot(exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue') +\n  geom_vline(xintercept=mean(exam_data$MATHS), color='red', linetype='dashed', size=1) +\n  geom_vline(xintercept=median(exam_data$MATHS), color='black', linetype='dashed', size=1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nIII. Histogram Makeover 2\n\nBefore\nHistograms show distribution of English scores by gender, but without context of all pupils.\n\nggplot(exam_data,\n       aes(x=ENGLISH)) +\n  geom_histogram(bins=25) +\n  facet_wrap(~GENDER)\n\n\n\n\n\n\nAfter\nThe histogram of all pupils is added as a light background to provide context of how each gender scores compared to the overall performance.\n\nexam_data_bg &lt;- exam_data[5]\n\nggplot(exam_data,\n       aes(x=ENGLISH, fill=GENDER)) +\n  geom_histogram(data=exam_data_bg, fill='grey', alpha=0.5) +\n  geom_histogram(colour='black') +\n  facet_wrap(~GENDER) +\n  guides(fill='none') +\n  theme_bw()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nIV. Scatterplot Makeover\n\nBefore\nScatterplot of English vs Maths scores. The axis have different scales even though they have the same units, and there are no reference marks indicating the (passing) score of 50%.\n\nggplot(exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nAfter\nBoth axes are standardised to the same scale. Reference lines are added to indicate scores of 50%.\n\nggplot(exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_vline(xintercept=50, color='grey70', linetype='dashed', size=1) +\n  geom_hline(yintercept=50, color='grey70', linetype='dashed', size=1) +\n  geom_point() +\n  coord_fixed(xlim=c(0,100),ylim=c(0,100))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "in_class_ex/in_class_ex_04/in_class_ex_04.html",
    "href": "in_class_ex/in_class_ex_04/in_class_ex_04.html",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "pacman::p_load(rstatix, gt, patchwork, tidyverse)\n\n\nexam_data <- read_csv('data/Exam_data.csv')"
  },
  {
    "objectID": "in_class_ex/in_class_ex_04/in_class_ex_04.html#visualising-a-normal-distribution",
    "href": "in_class_ex/in_class_ex_04/in_class_ex_04.html#visualising-a-normal-distribution",
    "title": "In-Class Exercise 4",
    "section": "Visualising a Normal Distribution",
    "text": "Visualising a Normal Distribution\n\nFirst Attempt: QQ Plot\nWe can use a QQ plot to visualise whether a distribution is normal or not. In the plot below, the points deviate significantly from the straight line, indicating that the data is not normally distributed.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(sample=ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\n\n\n\n\n\n\nNote\n\n\n\nWe use stat_qq() and stat_qq_line() methods to plot the QQ plot. Note that here aes takes an argument called sample instead of typical x and/or y.\n\n\n\n\n\n\n\nSecond Attempt: QQ Plot + Statistical Test Table\nWe can add a table showing the results of a formal statistical test for normality. Here we use the Shapiro-Wilk Test.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nqq <- ggplot(data = exam_data,\n             aes(sample=ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\nsw_t <- exam_data %>%\n  shapiro_test(ENGLISH) %>%\n  gt()\n\ntmp <- tempfile(fileext = '.png')\ngtsave(sw_t, tmp)\ntable_png <- png::readPNG(tmp, native=TRUE)\n\nqq + table_png"
  }
]