[
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html",
    "title": "Hands-On Exercise 2",
    "section": "",
    "text": "The code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment:\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#getting-started",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#getting-started",
    "title": "Hands-On Exercise 2",
    "section": "",
    "text": "The code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment:\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#annotations-without-overlapping-labels",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#annotations-without-overlapping-labels",
    "title": "Hands-On Exercise 2",
    "section": "Annotations without overlapping labels",
    "text": "Annotations without overlapping labels\n\nAnnotation using default ggplot geom_label()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label=ID)) +\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for Primary 3 students\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nAnnotation using ggrepel geom_text_repel()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label_repel(aes(label=ID)) +\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for Primary 3 students\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#beyond-ggplot2-themes",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#beyond-ggplot2-themes",
    "title": "Hands-On Exercise 2",
    "section": "Beyond ggplot2 Themes",
    "text": "Beyond ggplot2 Themes\n\nUsing default ggplot2 theme_gray theme\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='grey75') +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\nUsing ‘Economist’ theme from ggthemes\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='grey75') +\n  theme_economist() +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\nUsing hrbrthemes package\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='grey75') +\n  theme_ipsum() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#plotting-multiple-graphs-using-patchwork",
    "href": "hands_on_ex/hands_on_ex_02/hands_on_ex_02.html#plotting-multiple-graphs-using-patchwork",
    "title": "Hands-On Exercise 2",
    "section": "Plotting Multiple Graphs using patchwork",
    "text": "Plotting Multiple Graphs using patchwork\n\nInitial Graphs\n\np1 &lt;- ggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(binwidth=5,\n                 boundary=100,\n                 color='grey75') +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\np1\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data,\n       aes(x=ENGLISH)) +\n  geom_histogram(binwidth=5,\n                 boundary=100,\n                 color='grey75') +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  coord_cartesian(xlim=c(0,100),ylim=c(0,100)) +\n  ggtitle(\"English scores vs Maths scores for Primary 3 students\")\n\np3\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nTwo Graphs\n\np1 + p2\n\n\n\n\n\n\nThree Graphs\n\n(p1 / p2) | p3 +\n  plot_annotation(tag_levels='I')\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nInset another graph\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCombining with themes\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html",
    "title": "Hands-On Exercise 3",
    "section": "",
    "text": "In this Hands-On Exercise, we explore how to add interactive elements and animations to visualisations using appropriate R packages."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started",
    "title": "Hands-On Exercise 3",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\nThe code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment:\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\n\nImport the Data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#ggigraph-methods",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#ggigraph-methods",
    "title": "Hands-On Exercise 3",
    "section": "ggigraph Methods",
    "text": "ggigraph Methods\n\nTooltips\nThe following code generates an interactive version of a dotplot, and displays the ID value (student ID) when the cursor hovers over a given dot.\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip=ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nThe following code shows how the tooltip content can be customised:\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n\",\n  \"Class = \", exam_data$CLASS\n))\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip=tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nTooltips can be formatted using CSS, like so:\n\ntooltip_css &lt;- \"background-color:white; font-style:bold; color: black\"\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip=ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(opts_tooltip(css = tooltip_css))\n)\n\n\n\n\n\nTooltips can even be customised using a function, for example to show computed statistics:\n\ntooltip &lt;- function(y, ymax, accuracy=0.01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data,\n                   aes(x=RACE)) +\n  stat_summary(aes(y=MATHS,\n                   tooltip = after_stat(tooltip(y,ymax))),\n               fun.data = 'mean_se',\n               geom = GeomInteractiveCol,\n               fill = 'light blue'\n               ) +\n  stat_summary(aes(y=MATHS),\n               fun.data = mean_se,\n               geom = 'errorbar', width = 0.2, size = 0.2\n    \n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\nHover effect (using data_id)\nHere, when we hover over a data point, all other points with the same CLASS value (i.e. classmates) will be highlighted as well.\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot') +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\nBy default, the highlighted dots are shown in orange. This can be changed using CSS:\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot') +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\nCombining tooltips and hover effect\nTooltips and hover effect can be combined, so that when we mouse over a data point, all the data points of the same class will be highlighted, and at the same time the name of the class will also be shown:\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\nCoordinated multiple views\nBy combining ggiraph and patchwork, we can create coordinated graphs such that when a data point in the first graph is selected, the corresponding data point in the second graph will also be highlighted.\n\np1 &lt;- ggplot(data=exam_data,\n             aes(x=MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL, breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data,\n             aes(x=ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  coord_cartesian(xlim=c(0,100)) +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill:#202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n       )\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-web-data-viz-using-plotly",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-web-data-viz-using-plotly",
    "title": "Hands-On Exercise 3",
    "section": "Interactive Web Data Viz using plotly",
    "text": "Interactive Web Data Viz using plotly\n\nSimple scatter plot using plot_ly() method\n\nplot_ly(data = exam_data,\n        x = ~MATHS,\n        y = ~ENGLISH,\n        color = ~CLASS)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode\n\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\nWarning in RColorBrewer::brewer.pal(N, \"Set2\"): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n\n\n\n\n\n\n\nSame scatter plot using plotly: ggplotly() method\n\np &lt;- ggplot(data=exam_data,\n            aes(x=MATHS,\n                y=ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\n\nCoordinated multiple views using ggplotly()\n\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data=d,\n            aes(x=MATHS,\n                y=ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d,\n            aes(x=MATHS,\n                y=SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-data-tables",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#interactive-data-tables",
    "title": "Hands-On Exercise 3",
    "section": "Interactive Data Tables",
    "text": "Interactive Data Tables\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#linking-data-table-with-plot",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#linking-data-table-with-plot",
    "title": "Hands-On Exercise 3",
    "section": "Linking data table with plot",
    "text": "Linking data table with plot\n\nd &lt;- highlight_key(exam_data)\np &lt;- ggplot(d,\n            aes(ENGLISH, MATHS)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p), 'plotly_selected')\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths=5)\n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started-1",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#getting-started-1",
    "title": "Hands-On Exercise 3",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\nImport the Data\n\ncols &lt;- c('Country', 'Continent')\nglobalPop &lt;- read_xls('data/GlobalPopulation.xls',\n                      sheet='Data') %&gt;%\n  mutate(across(all_of(cols), ~ factor(.x))) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-gganimate",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-gganimate",
    "title": "Hands-On Exercise 3",
    "section": "Adding animations using gganimate",
    "text": "Adding animations using gganimate\n\nPopulation bubble plot\nStart with a static bubble plot:\n\nggplot(data=globalPop,\n       aes(x=Old,\n           y=Young,\n           size=Population,\n           colour=Country)) +\n  geom_point(alpha = 0.7,\n            show.legend = FALSE) +\n  scale_color_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young')\n\n\n\n\nAdd animation by creating transitions across Years:\n\nggplot(data=globalPop,\n       aes(x=Old,\n           y=Young,\n           size=Population,\n           colour=Country)) +\n  geom_point(alpha = 0.7,\n            show.legend = FALSE) +\n  scale_color_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-plotly",
    "href": "hands_on_ex/hands_on_ex_03/hands_on_ex_03.html#adding-animations-using-plotly",
    "title": "Hands-On Exercise 3",
    "section": "Adding animations using plotly",
    "text": "Adding animations using plotly\n\nUsing ggplotly() method\n\ngg &lt;- ggplot(data=globalPop,\n             aes(x=Old,\n                 y=Young,\n                 size=Population,\n                 colour=Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(x = '% Aged',\n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\n\nUsing plot_ly() method\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~Young,\n          size = ~Population,\n          color = ~Continent,\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = 'text',\n          type = 'scatter',\n          mode = 'markers')\n\nbp"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html",
    "title": "Hands-On Exercise 4",
    "section": "",
    "text": "In this Hands-On Exercise, we explore statistical analysis and uncertainty using visual analytics."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started",
    "title": "Hands-On Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nImport the Data\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#one-sample-test",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#one-sample-test",
    "title": "Hands-On Exercise 4",
    "section": "One-sample test",
    "text": "One-sample test\nThe following code uses the gghistostats() method to build a visual of a one-sample test for English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  type = 'bayes',\n  test.value = 60,\n  xlab = 'English scores'\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#two-sample-means-test",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#two-sample-means-test",
    "title": "Hands-On Exercise 4",
    "section": "Two-sample means test",
    "text": "Two-sample means test\nThe following code uses the ggbetweenstats() method to build a visual for a two-sample means test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  type = 'np',\n  messages = FALSE\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#one-way-anova-test",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#one-way-anova-test",
    "title": "Hands-On Exercise 4",
    "section": "One-way ANOVA test",
    "text": "One-way ANOVA test\nThe following code uses the ggbetweenstats() method to build a visual for an ANOVA test of English scores by race.\n\nggbetweenstats(\n  data = exam_data,\n  x = RACE,\n  y = ENGLISH,\n  mean.ci = TRUE,\n  pairwise.comparisons = TRUE,\n  pairwise.display = 's',\n  p.adjust.method = 'fdr',\n  messages = FALSE\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#test-for-significance-of-correlation",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#test-for-significance-of-correlation",
    "title": "Hands-On Exercise 4",
    "section": "Test for significance of correlation",
    "text": "Test for significance of correlation\nThe following code uses the ggscatterstats() method to build a visual for testing the significance of correlation between Maths and English scores.\n\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#test-for-significance-of-association",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#test-for-significance-of-association",
    "title": "Hands-On Exercise 4",
    "section": "Test for significance of association",
    "text": "Test for significance of association\nThe following code uses the ggbarstats() method to build a visual for testing the significance of association between binned Maths scores and gender.\n\nexam_binned <- exam_data %>%\n  mutate(MATHS_binned =\n           cut(MATHS, breaks = c(0,60,75,85,100)))\n\n\nggbarstats(\n  data = exam_binned,\n  x = MATHS_binned,\n  y = GENDER\n)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-1",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-1",
    "title": "Hands-On Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\nImport the Data\n\ncar_resale <- read_xls('data/ToyotaCorolla.xls', 'data')\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#multiple-regression-model",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#multiple-regression-model",
    "title": "Hands-On Exercise 4",
    "section": "Multiple Regression Model",
    "text": "Multiple Regression Model\n\nCreate the Model\n\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nCheck for Multicollinearity\n\ncheck_c <- check_collinearity(model)\nplot(check_c)\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\nCheck for Normality\n\nmodel1 <- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n <- check_normality(model1)\nplot(check_n)\n\n\n\n\n\n\nCheck for homogeneity of variances\n\ncheck_h <- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\nComplete check\n\ncheck_model(model1)\n\n\n\n\n\n\nVisualising regression parameters using plot()\n\nplot(parameters(model1))\n\n\n\n\n\n\nVisualising regression parameters using ggcoefstats()\n\nggcoefstats(model1, output='plot')"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-2",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-2",
    "title": "Hands-On Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(tidyverse, plotly, crosstalk, DT, ggdist, gganimate)\n\n\n\nImport the Data\n\nexam <- read_csv(\"data/Exam_data.csv\",\n                 show_col_types = FALSE)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#uncertainty-of-point-estimates",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#uncertainty-of-point-estimates",
    "title": "Hands-On Exercise 4",
    "section": "Uncertainty of Point Estimates",
    "text": "Uncertainty of Point Estimates\nCompute the count of observations, mean, standard deviation and standard error of Maths scores by RACE:\n\nmy_sum <- exam %>%\n  group_by(RACE) %>%\n  summarise(\n    n = n(),\n    mean = mean(MATHS),\n    sd = sd(MATHS)\n  ) %>%\n  mutate(\n    se = sd/sqrt(n-1)\n  )\n\n\nknitr::kable(head(my_sum),\n             format = 'html')\n\n\n\n \n  \n    RACE \n    n \n    mean \n    sd \n    se \n  \n \n\n  \n    Chinese \n    193 \n    76.50777 \n    15.69040 \n    1.132357 \n  \n  \n    Indian \n    12 \n    60.66667 \n    23.35237 \n    7.041005 \n  \n  \n    Malay \n    108 \n    57.44444 \n    21.13478 \n    2.043177 \n  \n  \n    Others \n    9 \n    69.66667 \n    10.72381 \n    3.791438 \n  \n\n\n\n\n\n\nStandard error of mean Maths scores\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE,\n        ymin=mean-se,\n        ymax=mean+se),\n    width = 0.2,\n    color = 'black',\n    alpha = 0.9,\n    size = 0.5\n  ) +\n  geom_point(\n    aes(x=RACE,\n        y=mean),\n    stat = 'identity',\n    color = 'red',\n    size = 1.5,\n    alpha = 1\n  ) +\n  ggtitle(\"Standard error of mean Maths scores by Race\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n95% CI of mean Maths scores\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE,-mean),\n        ymin=mean-se*qnorm(1-0.025),\n        ymax=mean+se*qnorm(1-0.025)),\n    width = 0.2,\n    color = 'black',\n    alpha = 0.9,\n    size = 0.5\n  ) +\n  geom_point(\n    aes(x=reorder(RACE,-mean),\n        y=mean),\n    stat = 'identity',\n    color = 'red',\n    size = 1.5,\n    alpha = 1\n  ) +\n  ggtitle(\"95% confidence interval for mean Maths scores by Race\")\n\n\n\n\n\n\nInteractive error bars"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#visualising-uncertainty-using-ggdist-methods",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#visualising-uncertainty-using-ggdist-methods",
    "title": "Hands-On Exercise 4",
    "section": "Visualising uncertainty using ggdist methods",
    "text": "Visualising uncertainty using ggdist methods\n\nUsing stat_pointinterval()\n\nexam %>%\n  ggplot(aes(x = RACE,\n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals for mean Maths scores\",\n    subtitle = \"Mean Point + Multiple-interval plot\"\n  )\n\n\n\n\n\n\nUsing stat_gradientinterval()\n\nexam %>%\n  ggplot(aes(x = RACE,\n             y = MATHS)) +\n  stat_gradientinterval(\n    fill = 'skyblue',\n    show.legend = TRUE\n  ) +\n  labs(\n    title = \"Visualising confidence intervals for mean Maths scores\",\n    subtitle = \"Gradient + interval plot\"\n  )\n\nWarning: fill_type = \"gradient\" is not supported by the current graphics device.\n - Falling back to fill_type = \"segments\".\n - If you believe your current graphics device *does* support\n   fill_type = \"gradient\" but auto-detection failed, set that option\n   explicitly and consider reporting a bug.\n - See help(\"geom_slabinterval\") for more information.\n\n\n\n\n\n\n\nUsing Hypothetical Outcome Plots (HOPs)\n\nlibrary(ungeviz)\n\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)\n\nWarning in geom_hpline(data = sampler(25, group = RACE), height = 0.6, color =\n\"#D55E00\"): Ignoring unknown parameters: `height`\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-3",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#getting-started-3",
    "title": "Hands-On Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstall and Load Required Packages\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\nInstalling package into 'C:/Users/yang_/AppData/Local/R/win-library/4.2'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.2/PACKAGES'\n\n\npackage 'FunnelPlotR' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\yang_\\AppData\\Local\\Temp\\Rtmp4gMnrC\\downloaded_packages\n\n\n\nFunnelPlotR installed\n\n\nWarning: package 'FunnelPlotR' was built under R version 4.2.3\n\n\n\n\nImport the Data\n\ncovid19 <- read_csv('data/COVID-19_DKI_Jakarta.csv', show_col_types = FALSE) %>%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#basic-funnel-plot-using-funnelplotr",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#basic-funnel-plot-using-funnelplotr",
    "title": "Hands-On Exercise 4",
    "section": "Basic Funnel Plot using FunnelPlotR",
    "text": "Basic Funnel Plot using FunnelPlotR\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`\n)\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\nFunnel Plot: Makeover 1\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",\n  x_range = c(0, 6500),\n  y_range = c(0, 0.05)\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nFunnel Plot: Makeover 2\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",\n  x_range = c(0, 6500),\n  y_range = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\"\n)\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#building-funnel-plots-from-scratch",
    "href": "hands_on_ex/hands_on_ex_04/hands_on_ex_04.html#building-funnel-plots-from-scratch",
    "title": "Hands-On Exercise 4",
    "section": "Building Funnel Plots from Scratch",
    "text": "Building Funnel Plots from Scratch\n\nCompute derived fields\n\ndf <- covid19 %>%\n  mutate(rate = Death/Positive) %>%\n  mutate(rate.se = sqrt( (rate*(1-rate))/Positive )) %>%\n  filter(rate > 0)\n\n\nfit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\nCalculate lower and upper limits for 95% and 99.9% CI\n\nnumber.seq <- seq(1, max(df$Positive), 1)\nnumber.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI <- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\nPlot static funnel plot\n\np <- ggplot(data=df,\n            aes(x=Positive,\n                y=rate\n                )) +\n  geom_point(aes(label=`Sub-district`),\n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 200, y = 0.003, label = \"95%\", size = 3, colour = \"grey40\") +\n  annotate(\"text\", x = 500, y = 0.0, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\np\n\n\n\n\n\n\nAdding interactivity\n\nfp_ggplotly <- ggplotly(p,\n                        tooltip = c('label', 'x', 'y'))\n\nfp_ggplotly"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html",
    "title": "Hands-On Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, they will be loaded into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#getting-started",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#getting-started",
    "title": "Hands-On Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, they will be loaded into R.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#plotting-charts",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#plotting-charts",
    "title": "Hands-On Exercise 1",
    "section": "Plotting Charts",
    "text": "Plotting Charts\n\nBar Chart\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nDot Plot\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize=0.5) +\n  scale_y_continuous(NULL,\n                     breaks=NULL)\n\n\n\n\n\n\nHistogram 1\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue')\n\n\n\n\n\n\nHistogram 2\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bins=20,\n                 color='white')\n\n\n\n\n\n\nKernel Density Estimate\n\nggplot(data=exam_data, \n       aes(x=MATHS,\n           colour=GENDER)) +\n  geom_density()\n\n\n\n\n\n\nBoxplot\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\nViolin Plot\nUseful to compare several distributions.\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_violin()\n\n\n\n\n\n\nScatterplot\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nCombining Geom Types\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(position='jitter',\n             size=0.5)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#adding-statistics",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#adding-statistics",
    "title": "Hands-On Exercise 1",
    "section": "Adding Statistics",
    "text": "Adding Statistics\n\nAdding mean to boxplot\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom='point',\n               fun='mean',\n               colour='red',\n               size=4)\n\n\n\n\n\n\nAdding best fit curve to scatterplot\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n       y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#facets",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#facets",
    "title": "Hands-On Exercise 1",
    "section": "Facets",
    "text": "Facets\n\nFacet Wrap\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n  facet_wrap(~CLASS)\n\n\n\n\n\n\nFacet Grid\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  facet_grid(~CLASS)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#coordinates",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#coordinates",
    "title": "Hands-On Exercise 1",
    "section": "Coordinates",
    "text": "Coordinates\n\nFlipping vertical bar chart to horizontal\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\nChanging axis ranges\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              size=0.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#themes",
    "href": "hands_on_ex/hands_on_ex_01/hands_on_ex_01.html#themes",
    "title": "Hands-On Exercise 1",
    "section": "Themes",
    "text": "Themes\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics & Applications",
    "section": "",
    "text": "This is a student website for ISSS608 exercise submissions."
  },
  {
    "objectID": "in_class_ex/in_class_ex_01/in_class_ex_01.html",
    "href": "in_class_ex/in_class_ex_01/in_class_ex_01.html",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\nggplot(exam_data,\n       aes(y=RACE)) +\n  geom_bar() +\n  theme_minimal() + \n  theme(panel.background = element_rect(fill='lightblue', colour='lightblue'),\n        panel.grid.major = element_line(color='white'))"
  },
  {
    "objectID": "in_class_ex/in_class_ex_01/in_class_ex_01.html#getting-started",
    "href": "in_class_ex/in_class_ex_01/in_class_ex_01.html#getting-started",
    "title": "In-Class Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nChanging the colors of plot panel background of theme_minimal() to light blue and the color of grid lines to white.\n\nggplot(exam_data,\n       aes(y=RACE)) +\n  geom_bar() +\n  theme_minimal() + \n  theme(panel.background = element_rect(fill='lightblue', colour='lightblue'),\n        panel.grid.major = element_line(color='white'))"
  },
  {
    "objectID": "in_class_ex/in_class_ex_01/in_class_ex_01.html#designing-data-driven-graphics-for-analysis",
    "href": "in_class_ex/in_class_ex_01/in_class_ex_01.html#designing-data-driven-graphics-for-analysis",
    "title": "In-Class Exercise 1",
    "section": "Designing Data-Driven Graphics for Analysis",
    "text": "Designing Data-Driven Graphics for Analysis\n\nI. Bar Chart Makeover\n\nBefore\ny-axis labels is not clear. Bars are not sorted. Frequency values not available.\n\nggplot(exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\nAfter\nThe y-axis has a clearer label, the bars are sorted by frequency in descending order, and frequency and percentage labels are provided for each bar.\n\nggplot(exam_data,\n       aes(x=fct_infreq(RACE))) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), sprintf(' (%.1f%%)', prop*100)), group=1), \n            stat='count', \n            vjust=-0.5, \n            colour='black') +\n  labs(x='Race', y='No. of Pupils') +\n  scale_y_continuous(limits=c(0,220))\n\n\n\n\n\n\n\nII. Histogram Makeover\n\nBefore\nFill and line colours make it difficult to see the individual bins. No mean or median reference lines.\n\nggplot(exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20)\n\n\n\n\n\n\nAfter\nChanged fill and line colours. Added mean and median reference lines (red and black respectively).\n\nggplot(exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color='black',\n                 fill='light blue') +\n  geom_vline(xintercept=mean(exam_data$MATHS), color='red', linetype='dashed', size=1) +\n  geom_vline(xintercept=median(exam_data$MATHS), color='black', linetype='dashed', size=1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nIII. Histogram Makeover 2\n\nBefore\nHistograms show distribution of English scores by gender, but without context of all pupils.\n\nggplot(exam_data,\n       aes(x=ENGLISH)) +\n  geom_histogram(bins=25) +\n  facet_wrap(~GENDER)\n\n\n\n\n\n\nAfter\nThe histogram of all pupils is added as a light background to provide context of how each gender scores compared to the overall performance.\n\nexam_data_bg &lt;- exam_data[5]\n\nggplot(exam_data,\n       aes(x=ENGLISH, fill=GENDER)) +\n  geom_histogram(data=exam_data_bg, fill='grey', alpha=0.5) +\n  geom_histogram(colour='black') +\n  facet_wrap(~GENDER) +\n  guides(fill='none') +\n  theme_bw()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nIV. Scatterplot Makeover\n\nBefore\nScatterplot of English vs Maths scores. The axis have different scales even though they have the same units, and there are no reference marks indicating the (passing) score of 50%.\n\nggplot(exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\nAfter\nBoth axes are standardised to the same scale. Reference lines are added to indicate scores of 50%.\n\nggplot(exam_data,\n       aes(x=MATHS, y=ENGLISH)) +\n  geom_vline(xintercept=50, color='grey70', linetype='dashed', size=1) +\n  geom_hline(yintercept=50, color='grey70', linetype='dashed', size=1) +\n  geom_point() +\n  coord_fixed(xlim=c(0,100),ylim=c(0,100))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "in_class_ex/in_class_ex_04/in_class_ex_04.html",
    "href": "in_class_ex/in_class_ex_04/in_class_ex_04.html",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "pacman::p_load(rstatix, gt, patchwork, tidyverse)\n\n\nexam_data &lt;- read_csv('data/Exam_data.csv')"
  },
  {
    "objectID": "in_class_ex/in_class_ex_04/in_class_ex_04.html#visualising-a-normal-distribution",
    "href": "in_class_ex/in_class_ex_04/in_class_ex_04.html#visualising-a-normal-distribution",
    "title": "In-Class Exercise 4",
    "section": "Visualising a Normal Distribution",
    "text": "Visualising a Normal Distribution\n\nFirst Attempt: QQ Plot\nWe can use a QQ plot to visualise whether a distribution is normal or not. In the plot below, the points deviate significantly from the straight line, indicating that the data is not normally distributed.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(sample=ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\n\n\n\n\n\n\nNote\n\n\n\nWe use stat_qq() and stat_qq_line() methods to plot the QQ plot. Note that here aes takes an argument called sample instead of typical x and/or y.\n\n\n\n\n\n\n\nSecond Attempt: QQ Plot + Statistical Test Table\nWe can add a table showing the results of a formal statistical test for normality. Here we use the Shapiro-Wilk Test.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\nqq &lt;- ggplot(data = exam_data,\n             aes(sample=ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\nsw_t &lt;- exam_data %&gt;%\n  shapiro_test(ENGLISH) %&gt;%\n  gt()\n\ntmp &lt;- tempfile(fileext = '.png')\ngtsave(sw_t, tmp)\ntable_png &lt;- png::readPNG(tmp, native=TRUE)\n\nqq + table_png"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received.\n\n\n\nApply the concepts and methods from Lesson 1-4 to reveal the demographic and financial characteristics of the city of Engagement by using appropriate static and interactive statistical graphics methods. This exercise requires a user-friendly and interactive solution that helps city managers and planners to explore the complex data in an engaging way and reveal hidden patterns.\n\n\n\nThe city managers and planners for City of Engagement.\n\n\n\nWe first import the packages we wish to use for this exercise:\n\npacman::p_load(tidyverse, magrittr, janitor, lubridate, rstatix, patchwork, ggiraph, ggridges, ggstatsplot, ggdist, ggthemes, gganimate)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#setting-the-scene",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#setting-the-scene",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "",
    "text": "City of Engagement, with a total population of 50,000, is a small city located at Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received."
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#the-task",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#the-task",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "",
    "text": "Apply the concepts and methods from Lesson 1-4 to reveal the demographic and financial characteristics of the city of Engagement by using appropriate static and interactive statistical graphics methods. This exercise requires a user-friendly and interactive solution that helps city managers and planners to explore the complex data in an engaging way and reveal hidden patterns."
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#the-user",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#the-user",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "",
    "text": "The city managers and planners for City of Engagement."
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#the-plan",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#the-plan",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "pacman::p_load(tidyverse, magrittr, janitor, lubridate, rstatix, patchwork, ggridges, ggstatsplot, ggdist, ggthemes, FunnelPlotR)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#data-overview",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#data-overview",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "2.1 Data Overview",
    "text": "2.1 Data Overview\nWe have two datasets to work with for this exercise, Participants.csv and FinancialJournal.csv. We examine them in turn for any data issues, and conduct necessary cleaning/preparation."
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#participants",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#participants",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "2.2 Participants",
    "text": "2.2 Participants\n\n2.2.1 Description\nContains information about the residents of City of Engagement that have agreed to participate in this study.\n\n\n\n\n\n\n\n\nColumn\nData Type\nDescription\n\n\n\n\nparticipantId\ninteger\nunique ID assigned to each participant\n\n\nhouseholdSize\ninteger\nthe number of people in the participant’s household\n\n\nhaveKids\nboolean\nwhether there are children living in the participant’s household\n\n\nage\ninteger\nparticipant’s age in years at the start of the study\n\n\neducationLevel\nstring factor\nthe participant’s education level, one of: {Low, HighSchoolOrCollege, Bachelors, Graduate}\n\n\ninterestGroup\nchar\na char representing the participant’s stated primary interest group, one of {A, B, C, D, E, F, G, H, I, J}. Note: specific topics of interest have been redacted to avoid bias\n\n\njoviality\nfloat\na value ranging from [0,1] indicating the participant’s overall happiness level at the start of the study\n\n\n\n\n\n2.2.2 Preparation\nLet’s load the data first to see what we have:\n\nparticipants &lt;- read_csv('data/Participants.csv')\n\nRows: 1011 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): educationLevel, interestGroup\ndbl (4): participantId, householdSize, age, joviality\nlgl (1): haveKids\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n2.2.2.1 Correct Data Types\nWe can see that several columns have been set to data types different from the given description. Let’s correct the column data types.\n\nparticipants %&lt;&gt;%\n  mutate(across(c('participantId', 'householdSize', 'age'),\n                as.integer))\n\nparticipants %&lt;&gt;%\n  mutate(educationLevel = educationLevel %&gt;%\n           fct_relevel(c('Low', 'HighSchoolOrCollege','Bachelors','Graduate')))\n\nDouble-check the column types are now correct:\n\nparticipants\n\n# A tibble: 1,011 × 7\n   participantId householdSize haveKids   age educationLevel      interestGroup\n           &lt;int&gt;         &lt;int&gt; &lt;lgl&gt;    &lt;int&gt; &lt;fct&gt;               &lt;chr&gt;        \n 1             0             3 TRUE        36 HighSchoolOrCollege H            \n 2             1             3 TRUE        25 HighSchoolOrCollege B            \n 3             2             3 TRUE        35 HighSchoolOrCollege A            \n 4             3             3 TRUE        21 HighSchoolOrCollege I            \n 5             4             3 TRUE        43 Bachelors           H            \n 6             5             3 TRUE        32 HighSchoolOrCollege D            \n 7             6             3 TRUE        26 HighSchoolOrCollege I            \n 8             7             3 TRUE        27 Bachelors           A            \n 9             8             3 TRUE        20 Bachelors           G            \n10             9             3 TRUE        35 Bachelors           D            \n# ℹ 1,001 more rows\n# ℹ 1 more variable: joviality &lt;dbl&gt;\n\n\n\n\n2.2.2.2 Check for duplicate records\nNo duplicate records were found in Participants.\n\nparticipants %&gt;% get_dupes()\n\n# A tibble: 0 × 8\n# ℹ 8 variables: participantId &lt;int&gt;, householdSize &lt;int&gt;, haveKids &lt;lgl&gt;,\n#   age &lt;int&gt;, educationLevel &lt;fct&gt;, interestGroup &lt;chr&gt;, joviality &lt;dbl&gt;,\n#   dupe_count &lt;int&gt;"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#financial-journal",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#financial-journal",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "2.3 Financial Journal",
    "text": "2.3 Financial Journal\n\n2.3.1 Description\nContains information about financial transactions.\n\n\n\n\n\n\n\n\nColumn\nData Type\nDescription\n\n\n\n\nparticipantId\ninteger\nunique ID corresponding to the participant affected\n\n\ntimestamp\ndatetime\nthe time when the check-in was logged\n\n\ncategory\nstring factor\na string describing the expense category, one of {Education, Food, Recreation, RentAdjustment, Shelter, Wage}\n\n\namount\ndouble\nthe amount of the transaction\n\n\n\n\n\n2.3.2 Preparation\nLet’s load the data first to see what we have:\n\nfinancial_journal &lt;- read_csv('data/FinancialJournal.csv')\n\nRows: 1513636 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): category\ndbl  (2): participantId, amount\ndttm (1): timestamp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n2.3.2.1 Correct Data Types\nSimilar to the Participants data, several columns have been set to data types different from the given description. Let’s correct the column data types as well.\n\nfinancial_journal %&lt;&gt;%\n  mutate(across(participantId, as.integer))\n\nfinancial_journal %&lt;&gt;%\n  mutate(across(category, as.factor))\n\n\nfinancial_journal\n\n# A tibble: 1,513,636 × 4\n   participantId timestamp           category  amount\n           &lt;int&gt; &lt;dttm&gt;              &lt;fct&gt;      &lt;dbl&gt;\n 1             0 2022-03-01 00:00:00 Wage      2473. \n 2             0 2022-03-01 00:00:00 Shelter   -555. \n 3             0 2022-03-01 00:00:00 Education  -38.0\n 4             1 2022-03-01 00:00:00 Wage      2047. \n 5             1 2022-03-01 00:00:00 Shelter   -555. \n 6             1 2022-03-01 00:00:00 Education  -38.0\n 7             2 2022-03-01 00:00:00 Wage      2437. \n 8             2 2022-03-01 00:00:00 Shelter   -557. \n 9             2 2022-03-01 00:00:00 Education  -12.8\n10             3 2022-03-01 00:00:00 Wage      2367. \n# ℹ 1,513,626 more rows\n\n\n\n\n2.3.2.2 Check for duplicate records\nThere are 2,226 records identified as duplicates:\n\nfinancial_journal %&gt;% get_dupes()\n\n# A tibble: 2,226 × 5\n   participantId timestamp           category  amount dupe_count\n           &lt;int&gt; &lt;dttm&gt;              &lt;fct&gt;      &lt;dbl&gt;      &lt;int&gt;\n 1             0 2022-03-01 00:00:00 Education  -38.0          2\n 2             0 2022-03-01 00:00:00 Education  -38.0          2\n 3             0 2022-03-01 00:00:00 Shelter   -555.           2\n 4             0 2022-03-01 00:00:00 Shelter   -555.           2\n 5             1 2022-03-01 00:00:00 Education  -38.0          2\n 6             1 2022-03-01 00:00:00 Education  -38.0          2\n 7             1 2022-03-01 00:00:00 Shelter   -555.           2\n 8             1 2022-03-01 00:00:00 Shelter   -555.           2\n 9             2 2022-03-01 00:00:00 Education  -12.8          2\n10             2 2022-03-01 00:00:00 Education  -12.8          2\n# ℹ 2,216 more rows\n\n\nThe duplicates appear to be a quality issue. Let’s remove them:\n\nfinancial_journal %&lt;&gt;% distinct()\n\nfinancial_journal %&gt;% get_dupes()\n\n# A tibble: 0 × 5\n# ℹ 5 variables: participantId &lt;int&gt;, timestamp &lt;dttm&gt;, category &lt;fct&gt;,\n#   amount &lt;dbl&gt;, dupe_count &lt;int&gt;"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#exploratory-analysis",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#exploratory-analysis",
    "title": "Take-Home Exercise 1",
    "section": "Exploratory Analysis",
    "text": "Exploratory Analysis\n\nTransient residents?\nFrom initial exploration, we can see that the financial transactions span a year, from 1 Mar 2022 to 28 Feb 2023:\n\nfinancial_journal %&gt;% summary()\n\n participantId      timestamp                                category     \n Min.   :   0.0   Min.   :2022-03-01 00:00:00.00   Education     :  3018  \n 1st Qu.: 222.0   1st Qu.:2022-05-24 16:05:00.00   Food          :790051  \n Median : 464.0   Median :2022-08-25 16:20:00.00   Recreation    :296013  \n Mean   : 480.9   Mean   :2022-08-26 08:09:38.58   RentAdjustment:   131  \n 3rd Qu.: 726.0   3rd Qu.:2022-11-27 08:05:00.00   Shelter       : 10651  \n Max.   :1010.0   Max.   :2023-02-28 23:55:00.00   Wage          :412659  \n     amount         \n Min.   :-1562.726  \n 1st Qu.:   -5.594  \n Median :   -4.000  \n Mean   :   20.423  \n 3rd Qu.:   21.649  \n Max.   : 4096.526  \n\n\nHowever, when we look at the range of transaction timestamps per participant, we realise that a small subset of participants only had transactions for a few days in early March. It seems that these participants may be transient residents, such as tourists or business visitors:\n\ntransient &lt;- financial_journal %&gt;%\n  group_by(participantId) %&gt;%\n  summarise(count = n(),\n            first = min(timestamp),\n            last = max(timestamp)) %&gt;%\n  filter(last &lt; '2022-03-10') %&gt;%\n  arrange(last)\n\ntransient_participants &lt;- participants %&gt;%\n  filter(participantId %in% transient$participantId)\n\nFor the purpose of this exercise, let us assume that the city planners are not interested in transient residents. Hence, let’s exclude them from the dataset (both Participants and Financial Journal):\n\nparticipants %&lt;&gt;%\n  filter(! participantId %in% transient$participantId)\n\nfinancial_journal %&lt;&gt;%\n  filter(! participantId %in% transient$participantId)"
  },
  {
    "objectID": "in_class_ex/in_class_ex_04/in_class_ex_04.html#import-packages-and-data",
    "href": "in_class_ex/in_class_ex_04/in_class_ex_04.html#import-packages-and-data",
    "title": "In-Class Exercise 4",
    "section": "",
    "text": "pacman::p_load(rstatix, gt, patchwork, tidyverse)\n\n\nexam_data &lt;- read_csv('data/Exam_data.csv')"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#what-is-the-overall-age-distribution",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#what-is-the-overall-age-distribution",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "4.1 What is the overall age distribution?",
    "text": "4.1 What is the overall age distribution?\nWe can see that the age distribution of residents is quite uniform.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I used a histogram as it is the classic choice for visualising population age distribution. After some experimentation I chose a bin width of 3 to strike a balance between detail and being able to see the overall shape.\n\n\n\n\nShow code\nggplot(data=participants,\n             aes(x=age, y=after_stat(count))) +\n  geom_histogram(binwidth=3, color='white') +\n  # geom_density() +\n  scale_x_continuous(name = \"age (years)\") +\n  ggtitle(\"Generally uniform age distribution\",\n          subtitle = \"Age is quite uniformly distributed.\")"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#how-big-are-households-and-do-they-have-kids",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#how-big-are-households-and-do-they-have-kids",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "4.2 How big are households and do they have kids?",
    "text": "4.2 How big are households and do they have kids?\n\nggplot(data=participants,\n       aes(y = fct_rev(fct_infreq(as.factor(householdSize))),\n           fill = haveKids)) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), sprintf(' (%.1f%%)', prop*100)), group=1), \n            stat='count', \n            hjust=1.2, \n            colour='white') +\n  ylab(\"Household Size\") +\n  theme(axis.ticks.y=element_blank(),\n        text = element_text(size=12)) +\n  scale_fill_discrete(name='', labels=c('No Kids', 'Have Kids')) +\n  ggtitle(\"Small households\",\n          subtitle = \"1- and 2-member (adult-only) households are most common. Largest household size is 3.\")"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#does-household-size-and-having-kids-vary-with-age",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#does-household-size-and-having-kids-vary-with-age",
    "title": "Take-Home Exercise 1",
    "section": "Does household size and having kids vary with age?",
    "text": "Does household size and having kids vary with age?\n\nggplot(data=participants,\n       aes(x=age, fill=as.factor(householdSize))) +\n  geom_density(data=select(participants, age), fill='grey', color='grey', alpha=0.5) +\n  geom_density(alpha=0.5) +\n  facet_wrap(~householdSize)\n\n\n\n\n\nggplot(data=participants,\n       aes(x=age, fill=educationLevel, color=educationLevel)) +\n  geom_density(data=select(participants, age), fill='grey', color='grey', alpha=0.5) +\n  geom_density(alpha=0.5) +\n  facet_wrap(~educationLevel, nrow=1)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#does-household-size-vary-with-age",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#does-household-size-vary-with-age",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "4.3 Does household size vary with age?",
    "text": "4.3 Does household size vary with age?\n\nggplot(data=participants,\n       aes(x=age, y=after_stat(count))) +\n  geom_density(data=select(participants, age), fill='grey', color='transparent', alpha=0.5) +\n  geom_density(alpha=0.5, fill='turquoise', color='turquoise') +\n  facet_wrap(~householdSize) +\n  ggtitle(\"No significant association between age and household size\")"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#how-well-educated-are-residents",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#how-well-educated-are-residents",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "4.4 How well-educated are residents?",
    "text": "4.4 How well-educated are residents?\n\nggplot(data=participants,\n       aes(y = educationLevel)) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), '\\n', sprintf('(%.1f%%)', prop*100)), group=1), \n            stat='count', \n            hjust=1.2, \n            colour='white') +\n  ylab(\"Education Level\") +\n  theme(axis.ticks.y=element_blank(),\n        text = element_text(size=12)) +\n  ggtitle(\"Well-educated residents\",\n          subtitle = \"More than 90% have at least high school/college education; \\nalmost 20% have graduate qualifications.\")"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#does-education-level-vary-with-age",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#does-education-level-vary-with-age",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "4.5 Does education level vary with age?",
    "text": "4.5 Does education level vary with age?\n\nggplot(data=participants,\n       aes(x=age, y=after_stat(count))) +\n  geom_density(data=select(participants, age), fill='grey', color='transparent', alpha=0.5) +\n  geom_density(alpha=0.5, fill='orange', color='orange') +\n  facet_wrap(~educationLevel, nrow=1) +\n  ggtitle(\"No significant association between age and education level\")\n\n\n\n\n\nggplot(participants,\n       aes(x=age, y=after_stat(count),fill=fct_rev(educationLevel), color=fct_rev(educationLevel))) +\n  geom_density(position='stack') +\n  scale_fill_brewer(palette = 'BuPu', name='Education Level') +\n  scale_color_brewer(palette = 'BuPu', name='Education Level') +\n  ggtitle(\"No significant variation in education level by age\")"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#interest-group",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#interest-group",
    "title": "Take-Home Exercise 1",
    "section": "Interest group",
    "text": "Interest group"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#transient-residents",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#transient-residents",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "2.4 Transient residents?",
    "text": "2.4 Transient residents?\nFrom initial exploration, we can see that the financial transactions span a year, from 1 Mar 2022 to 28 Feb 2023:\n\nfinancial_journal %&gt;% summary()\n\n participantId      timestamp                                category     \n Min.   :   0.0   Min.   :2022-03-01 00:00:00.00   Education     :  3018  \n 1st Qu.: 222.0   1st Qu.:2022-05-24 16:05:00.00   Food          :790051  \n Median : 464.0   Median :2022-08-25 16:20:00.00   Recreation    :296013  \n Mean   : 480.9   Mean   :2022-08-26 08:09:38.58   RentAdjustment:   131  \n 3rd Qu.: 726.0   3rd Qu.:2022-11-27 08:05:00.00   Shelter       : 10651  \n Max.   :1010.0   Max.   :2023-02-28 23:55:00.00   Wage          :412659  \n     amount         \n Min.   :-1562.726  \n 1st Qu.:   -5.594  \n Median :   -4.000  \n Mean   :   20.423  \n 3rd Qu.:   21.649  \n Max.   : 4096.526  \n\n\nHowever, when we look at the range of transaction timestamps per participant, we realise that a small subset of participants only had transactions for a few days in early March. It seems that these participants may be transient residents, such as tourists or business visitors:\n\ntransient &lt;- financial_journal %&gt;%\n  group_by(participantId) %&gt;%\n  summarise(count = n(),\n            first = min(timestamp),\n            last = max(timestamp)) %&gt;%\n  filter(last &lt; '2022-03-10') %&gt;%\n  arrange(last)\n\ntransient_participants &lt;- participants %&gt;%\n  filter(participantId %in% transient$participantId)\n\nFor the purpose of this exercise, let us assume that the city planners are not interested in transient residents. Hence, let’s exclude them from the dataset (both Participants and Financial Journal):\n\nparticipants %&lt;&gt;%\n  filter(! participantId %in% transient$participantId)\n\nfinancial_journal %&lt;&gt;%\n  filter(! participantId %in% transient$participantId)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#aggregating-financial-journal-data",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#aggregating-financial-journal-data",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "2.5 Aggregating Financial Journal data",
    "text": "2.5 Aggregating Financial Journal data\nThe Financial Journal contains individual transactions, both income and expenses. For analysis, we may wish to look at income and expenses separately. Additionally, it is more useful to look at financial transactions at different levels of aggregation, e.g. daily, monthly, annually. Let’s create a new column, category_type, indicating whether a transaction is an Income or an Expense. Then we create 3 new tables for these 3 levels of aggregation respectively, using the library lubridate to help with processing the timestamps:\n\n## add 'transaction_type' column indicating 'Income' or 'Expense' \nfinancial_journal %&lt;&gt;%\n  mutate(\n    category_type = case_when(\n      amount&gt;0 ~ 'Income',\n      amount&lt;=0 ~'Expense'\n    ))\n\n## daily aggregated transactions per participant\nfj_daily &lt;- financial_journal %&gt;%\n  mutate(timestamp_date = as.Date(timestamp)) %&gt;%\n  group_by(participantId, timestamp_date, category, category_type) %&gt;%\n  summarise(amount_total = sum(amount))\n\n## monthly aggregated transactions per participant\nfj_monthly &lt;- financial_journal %&gt;%\n  mutate(timestamp_month = format_ISO8601(timestamp, precision = \"ym\")) %&gt;%\n  group_by(participantId, timestamp_month, category, category_type) %&gt;%\n  summarise(amount_total = sum(amount))\n\n## annual aggregated transactions per participant\nfj_annual &lt;- financial_journal %&gt;%\n  group_by(participantId, category, category_type) %&gt;%\n  summarise(amount_total = sum(amount))"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#are-some-interest-groups-more-popular-than-others-overall",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#are-some-interest-groups-more-popular-than-others-overall",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "4.6 Are some interest groups more popular than others overall?",
    "text": "4.6 Are some interest groups more popular than others overall?\n\nggplot(data=participants,\n       aes(y = fct_rev(fct_infreq(interestGroup)))) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), sprintf(' (%.1f%%)', prop*100)), group=1), \n            stat='count', \n            hjust=1.2, \n            colour='white') +\n  ylab(\"Interest Group\") +\n  theme(axis.ticks.y=element_blank(),\n        text = element_text(size=12)) +\n  ggtitle(\"No significant difference in popularity of interest groups\")"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#does-age-profile-vary-between-different-interest-groups",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#does-age-profile-vary-between-different-interest-groups",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "4.7 Does age profile vary between different interest groups?",
    "text": "4.7 Does age profile vary between different interest groups?\n\nggplot(data=participants,\n       aes(x=age, y=after_stat(count))) +\n  geom_density(data=select(participants, age), fill='grey', color='grey', alpha=0.5) +\n  geom_density(alpha=0.5, fill='turquoise', color='turquoise') +\n  facet_wrap(~interestGroup) +\n  ggtitle(\"No significant association between age and interest group\")\n\n\n\n\n\nggplot(data=participants,\n       aes(x=interestGroup)) +\n  geom_bar() +\n  facet_wrap(~haveKids) +\n  ggtitle(\"No significant association between age and education level\")\n\n\n\n\n\nggbarstats(data = participants,\n           x = haveKids,\n           y =educationLevel,\n           type = 'np')"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#what-does-the-overall-finances-of-residents-look-like",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#what-does-the-overall-finances-of-residents-look-like",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.3 What does the overall finances of residents look like?",
    "text": "3.3 What does the overall finances of residents look like?\nAt the aggregate level, expenses are about a third of income. We also see the largest income category (Wages) and largest expense category (Shelter).\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I used two bar charts to compare income and expenses. They are two separate charts that were combined using patchwork. Care was taken to ensure that the two axis were the same scale, so that direct comparisons between the two charts are possible. Lastly, ggiraph library was used to add interactive tooltips showing the exact amount.\n\n\n\np1 &lt;- ggplot(fj_annual%&gt;%group_by(category)%&gt;%summarise(total=sum(amount_total))%&gt;%filter(total&gt;0),\n       aes(x='Income', y=total, fill=fct_infreq(category, total))) +\n  geom_col_interactive(aes(tooltip=paste0(category, ': ', sprintf('%.0f', abs(total)))), \n                       position=position_stack(reverse=TRUE)) +\n  scale_y_continuous(name = 'Amount',\n                     limits = c(0,5e7),\n                     labels = scales::comma) +\n  coord_flip() +\n  xlab('') +\n  scale_fill_brewer(palette = 'Set1', name = 'Income Categories') +\n  theme(axis.text.y = element_text(size=12))\n\np2 &lt;- ggplot(fj_annual%&gt;%group_by(category)%&gt;%summarise(total=sum(amount_total))%&gt;%filter(total&lt;0),\n       aes(x='Expense', y=abs(total), fill=fct_infreq(category, abs(total)))) +\n  geom_col_interactive(aes(tooltip=paste0(category, ': ', sprintf('%.0f', abs(total)))), \n                       position=position_stack(reverse=TRUE)) +\n  scale_y_continuous(name = 'Amount',\n                     limits = c(0,5e7),\n                     labels = scales::comma) +\n  coord_flip() +\n  xlab('') +\n  scale_fill_brewer(palette = 'Set2', name = 'Expense Categories') +\n  theme(axis.text.y = element_text(size=12))\n\ngirafe(code = print(p1/p2),\n       width_svg = 10,\n       height_svg = 4)\n\n\n\n\n# (p1/p2) +\n#   plot_annotation(\n#     title = \"In aggregate (Mar 2022 - Feb 2023), residents spent about a third of their income\",\n#     subtitle = \"Almost all income comes from Wages, and Shelter is the largest expense.\"\n#   )"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#income",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#income",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.3 Income",
    "text": "3.3 Income\n\n3.3.1 How are annual wages distributed?\nWe can see that wage distribution is highly skewed, i.e. a large number of residents earning low- to medium-level wages, and a small number of residents earning high wages.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I used a so-called raincloud plot to visualise the distribution of income. It comprises a density plot, boxplot and dotplot. Each sub-component communicates a different aspect of the data. The density plot most clearly shows how the data is skewed. The boxplot indicates the median, quartiles and outlier range. The dotplot shows the relative quantity of data points at each wage level, something that is not apparent with just density plot or boxplot.\n\n\n\n\nShow Code\nggplot(fj_annual%&gt;%filter(category=='Wage'), \n       aes(x='',y = amount_total)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 1000,\n            dotsize = .5) +\n  coord_flip(ylim=c(0,225000)) +\n  scale_y_continuous(name = 'Annual Wage',\n                     limits = c(0,5e7),\n                     labels = scales::comma) +\n  xlab('') +\n  theme(axis.ticks.y=element_blank()) +\n  theme_minimal() +\n  ggtitle(\"Annual wage distribution is highly skewed\",\n          subtitle=\"Median wage is less than $50K; highest more than $200K\") \n\n\n\n\n\n\n\n3.3.2 Do wages vary across the months of the year?\nWe see that monthly wages remain quite stable over the course of a year, except for a spike in March which could be attributed to residents receiving some sort of annual bonus.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nI felt the classic boxplot did the best job of showing how the distribution of wages in each month remained quite consistent over the course of a year. I tried using a ridgeline plot, but it was not effective as all the plots would overlap almost completely with each other.\n\n\n\n\nShow Code\nggplot(fj_monthly%&gt;%filter(category=='Wage'), \n       aes(y=amount_total,x=timestamp_month)) +\n  geom_boxplot() +\n  scale_y_continuous(name = 'Amount',\n                     labels = scales::comma) +\n  xlab('Year-Month') +\n  theme_minimal() +\n  ggtitle(\"Wages are consistent over most of the year...\",\n          subtitle = \"... Except for a spike in March.\")\n\n\n\n\n\n\n\n3.3.3 What factors correlate with wages?\n\n3.3.3.1 Education Level\nWe start with plotting the annual wage by education level, adding bars to indicate the uncertainty. We then used ggstatplot again to generate a visual statistical test of whether wages do in fact vary significantly according to education level.\n\n\nShow Code\nggplot(\n  data = filter(p_fj_annual, category=='Wage'),\n  aes(x = educationLevel,\n      y = amount_total)) +\n  stat_pointinterval(show.legend=TRUE) +\n  scale_y_continuous(name = 'Amount',\n                     labels = scales::comma) +\n  ggtitle(\"Mean wages\",\n          subtitle = \"With confidence interval indication\")\n\n\n\n\n\n\n\nShow Code\nggbetweenstats(\n  data = filter(p_fj_annual, category=='Wage'),\n  x = educationLevel,\n  y = amount_total,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE,\n  title = \"Wage increases significantly with higher education level\",\n  xlab = \"Education Level\",\n  ylab = \"Wage\"\n)\n\n\n\n\n\n\n\n3.3.3.2 Joviality\nIt was interesting to see if there was any relationship between joviality and wage (“Does money buy happiness?” etc.) It seems that at low to medium wage levels (below about $75K), there is little to no relation between joviality and wage. However as wages continue to increase, a strong downward trend of joviality becomes apparent.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nWhen examining the relationship between two quantitative variables, a scatterplot is the obvious choice. To make the graph even more informative, I added two more mappings: colour to indicate the education level, and size to indicate the household size. Visually, I also lowered the alpha values to improve legibility.\n\n\n\n\nShow Code\nggplot(filter(p_fj_annual, category=='Wage'),\n       aes(y=joviality, \n           x=amount_total,\n           fill=educationLevel,\n           size=householdSize)) +\n  geom_point(pch=21, color='white', alpha=0.7) +\n  scale_x_continuous(name = 'Annual Wage',\n                     labels = scales::comma) +\n  scale_y_continuous(name = \"Joviality\",\n                     limits = c(0,1)) +\n  scale_fill_discrete(name=\"Education Level\") +\n  scale_radius(\n    name = \"Household Size\",\n    range = c(1, 3),\n    limits = c(1, 3),\n    breaks = c(1, 2, 3),\n    guide = guide_legend(\n      override.aes = list(fill = \"gray40\"))) +\n  theme_minimal() +\n  ggtitle(\"Joviality trends downards at high wages\",\n          subtitle = \"At lower wages, wages and joviality are not strongly related\")"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#expenses",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#expenses",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.4 Expenses",
    "text": "3.4 Expenses\n\n3.4.1 Distribution of spend amount in each expense category?\nHere we see that the distribution of spend varies a lot between expense categories. Shelter has the widest range of spending, followed by Recreation, Food and Education. Shelter and Food are interesting as they clearly show two humps, i.e. a bimodal distribution.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nI wanted to compare multiple distributions, so a ridgeline plot for each variable seemed to make sense. This method shows the characteristics of each distribution very clearly compared to boxplots (e.g. a boxplot would not have surfaced the bimodal distributions of Food and Shelter). The jittered data points below give a sense of the number of data points in each category, that would otherwise not be obvious from the density plot alone. For example, from the jittered points we can see that actually relatively few residents spend money on Education.\n\n\n\n\nShow Code\nggplot(filter(fj_annual, category_type=='Expense'),\n       aes(y=category,\n           x=abs(amount_total))) +\n  stat_density_ridges(quantile_lines=TRUE, quantiles=2,\n                      scale=0.8,\n                      rel_min_height=0.01,\n                      bandwidth=500,\n                      jittered_points = TRUE,\n                      position = 'raincloud',\n                      point_size=0.1,\n                      point_alpha=0.7,\n                      fill='azure2',\n                      color='azure4',\n                      alpha=0.8) +\n  scale_x_continuous(name = 'Amount',\n                     limits = c(0,20000),\n                     labels = scales::comma) +\n  scale_y_discrete(name = '') +\n  theme_minimal() +\n  theme(axis.text.y = element_text(size=10)) +\n  ggtitle(\"Distribution of annual expenses across categories\",\n          subtitle = \"Vertical line indicates median value\")\n\n\n\n\n\n\n\n3.4.2 How do expenses vary from month to month?\nOn average, expenses are quite consistent from month to month over the course of a year, except for higher Shelter and Recreation expenses in March.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nA simple line graph is effective in displaying month-to-month changes in expense in each category.\n\n\n\n\nShow Code\nfj_monthly_grouped &lt;- fj_monthly %&gt;%\n  group_by(timestamp_month, category, category_type) %&gt;%\n  summarise(amount_total = mean(amount_total)) %&gt;%\n  ungroup()\n\nfj_final_month &lt;- fj_monthly_grouped %&gt;%\n  filter(timestamp_month=='2023-02' & category_type=='Expense') %&gt;%\n  arrange(desc(amount_total))\n  \n\nggplot(\n  data = filter(fj_monthly_grouped, category_type=='Expense'),\n  aes(x = timestamp_month,\n      y = abs(amount_total),\n      color = category,\n      group=category)) +\n  geom_line(size=.5) +\n  geom_point(size=1) +\n  scale_color_discrete(name = 'Expense Categories') +\n  xlab('Year-Month') +\n  ylab('Mean expense') +\n  ggtitle(\"Expenses across categories are consistent over most of the year...\",\n          subtitle = \"... Except for higher Shelter and Recreation expenses in March.\")\n\n\n\n\n\n\n\n3.4.3 Does spending pattern change with amount of income?\nWe see that generally as income increases, the proportion of expenses in each category gradually decrease. In other words, at higher incomes, increase in income does not lead to significant increase in expenditures, and most of the money is probably being saved or invested.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I wanted to be able to visualise if and how the proportion of income spent on various expenses change as income changes. I started with a scatterlot of overall expense percentage versus income. Then I added a second graph, a scatterplot facet wrap that breaks down the expense percentage by expense category. I added interactivity so that when you hover over a point in the first graph, the corresponding points in the facet wrap subgraphs are highlighted as well.\n\n\n\n\nShow Code\np_fj_annual_wage &lt;- p_fj_annual %&gt;%\n  filter(category=='Wage')\n\np_fj_annual_expense_wage &lt;- p_fj_annual %&gt;%\n  left_join(select(p_fj_annual_wage, participantId, wage=amount_total))\n\np_fj_annual_spread &lt;- p_fj_annual %&gt;%\n  select(-category_type) %&gt;%\n  spread(category, amount_total, fill=0) %&gt;%\n  mutate(income_total = Wage+RentAdjustment) %&gt;%\n  mutate(expense_total = Shelter+Recreation+Food+Education) %&gt;%\n  mutate(expense_pct = expense_total/income_total)\n\np1 &lt;- ggplot(p_fj_annual_spread,\n             aes(x=income_total, y=abs(expense_pct))) +\n  geom_point_interactive(aes(data_id = participantId),\n                         alpha=0.7) +\n  scale_x_continuous(name = 'Income',\n                     limits = c(0,250000),\n                     labels = scales::comma) +\n  scale_y_continuous(name = 'Total expense as percent of income',\n                     limits = c(0,1),\n                     labels = scales::percent_format()) +\n  ggtitle(\"Relationship between income and expense\")\n\np2 &lt;- ggplot(filter(p_fj_annual_expense_wage, category_type=='Expense'),\n       aes(x=wage, y=abs(amount_total)/wage,\n           fill=category,\n           size=householdSize)) +\n  geom_point_interactive(aes(data_id = participantId),\n                         pch=21, color='white', alpha=0.7) +\n  scale_x_continuous(name = 'Income',\n                     limits = c(0,250000),\n                     labels = scales::comma) +\n  scale_y_continuous(name = 'Expense as percent of income',\n                     limits = c(0,0.6),\n                     labels = scales::percent_format()) +\n  scale_radius(\n    name = \"Household Size\",\n    range = c(1, 3),\n    limits = c(1, 3),\n    breaks = c(1, 2, 3),\n    guide = guide_legend(\n      override.aes = list(fill = \"gray40\"))) +\n  facet_wrap(~category) \n\ngirafe(code = print(p1/p2),\n       width_svg = 10,\n       height_svg = 10,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         ))\n\n\n\n\n\n\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere is another attempt at visualising how expenses change as income increases, this time using animation (provided by gganimate).\n\n\n\n\nShow Code\nfj_annual_expense_wage_binned &lt;- p_fj_annual_expense_wage %&gt;%\n  mutate(wage_binned = cut(wage, seq(min(wage)%/%1000*1000, max(wage)%/%1000*1000+1000, 1000), dig.lab = 10)) %&gt;%\n  group_by(category_type, category, wage_binned) %&gt;%\n  summarise(avg_amount = mean(amount_total))\n\ngg &lt;- ggplot(filter(fj_annual_expense_wage_binned, category != 'RentAdjustment'),\n       aes(y=category, x=abs(avg_amount),\n           fill=category)) +\n  geom_col() +\n  scale_x_continuous(name = 'Expense',\n                     limits = c(0,200000),\n                     labels = scales::comma) \n  labs(title = 'Income bracket: {closest_state}') +\n  transition_states(wage_binned, transition_length = 30, state_length = 10)\n\n\nNULL\n\n\n\n\n3.4.4 What expenses correlate with joviality?\nThere is a gentle upward trend in joviality as the proportion of expenses on Food and Recreation increases.\n\n\nShow Code\nggplot(filter(p_fj_annual_expense_wage, category_type=='Expense'),\n       aes(y=joviality, \n           x=abs(amount_total)/wage,\n           color=category,\n           shape=category)) +\n  geom_point(alpha=0.8) +\n  # geom_smooth(size=0.5) +\n  scale_x_continuous(name = 'Expense as proportion of income',\n                     labels = scales::percent_format()) +\n  scale_y_continuous(name = \"Joviality\",\n                     limits = c(0,1)) +\n  scale_color_brewer(name=\"Expense Category\", palette = 'Spectral') +\n  scale_shape_discrete(name=\"Expense Category\") +\n  # facet_wrap(~category) +\n  theme_minimal() +\n  ggtitle(\"Joviality tends to increase with higher proportion of income \\nspent on Food and Recreation\",\n          )"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#does-spending-change-with-income",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#does-spending-change-with-income",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.5 Does spending change with income?",
    "text": "3.5 Does spending change with income?\n\n\nShow Code\np_fj_annual_spread &lt;- p_fj_annual %&gt;%\n  select(-category_type) %&gt;%\n  spread(category, amount_total, fill=0) %&gt;%\n  mutate(income_total = Wage+RentAdjustment) %&gt;%\n  mutate(expense_total = Shelter+Recreation+Food+Education) %&gt;%\n  mutate(expense_pct = expense_total/income_total)\n\nggplot(p_fj_annual_spread,\n       aes(x=income_total,\n           y=abs(expense_pct),\n           fill=educationLevel,\n           size=householdSize)) +\n  geom_point(pch=21, color='white', alpha=0.7) +\n  scale_x_continuous(name = 'Income',\n                     limits = c(0,250000),\n                     labels = scales::comma) +\n  scale_y_continuous(name = 'Expense as percent of income',\n                     limits = c(0,1),\n                     labels = scales::percent_format()) +\n  scale_radius(\n    name = \"Household Size\",\n    range = c(1, 3),\n    limits = c(1, 3),\n    breaks = c(1, 2, 3),\n    guide = guide_legend(\n      override.aes = list(fill = \"gray40\"))) +\n  theme_minimal()\n\n\n\n\n\n\n\nShow Code\np_fj_annual_wage &lt;- p_fj_annual %&gt;%\n  filter(category=='Wage')\n\np_fj_annual_expense_wage &lt;- p_fj_annual %&gt;%\n  left_join(select(p_fj_annual_wage, participantId, wage=amount_total))\n\n\nggplot(filter(p_fj_annual_expense_wage, category_type=='Expense'),\n       aes(x=wage, y=abs(amount_total)/wage,\n           fill=category,\n           size=householdSize)) +\n  geom_point(pch=21, color='white', alpha=0.7) +\n  scale_x_continuous(name = 'Income',\n                     limits = c(0,250000),\n                     labels = scales::comma) +\n  scale_y_continuous(name = 'Expense as percent of income',\n                     limits = c(0,0.6),\n                     labels = scales::percent_format()) +\n  scale_radius(\n    name = \"Household Size\",\n    range = c(1, 3),\n    limits = c(1, 3),\n    breaks = c(1, 2, 3),\n    guide = guide_legend(\n      override.aes = list(fill = \"gray40\"))) +\n  # facet_wrap(~category) +\n  theme_minimal()\n\n\n\n\n\nanimate - as you get richer, how expense proportion changes?"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#how-do-shelter-expenses-vary-by-demographic",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#how-do-shelter-expenses-vary-by-demographic",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.5 How do Shelter expenses vary by demographic?",
    "text": "3.5 How do Shelter expenses vary by demographic?"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#what-correlates-strongly-with-happiness",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#what-correlates-strongly-with-happiness",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.6 What correlates strongly with happiness?",
    "text": "3.6 What correlates strongly with happiness?"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "",
    "text": "This take-home exercise is based on VAST Challenge 2023’s Mini-Challenge 2."
  },
  {
    "objectID": "in_class_ex/in_class_ex_05/in_class_ex_05.html",
    "href": "in_class_ex/in_class_ex_05/in_class_ex_05.html",
    "title": "In-Class Exercise 5: Visualising Graph Data",
    "section": "",
    "text": "pacman::p_load(jsonlite, igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")"
  },
  {
    "objectID": "in_class_ex/in_class_ex_05/in_class_ex_05.html#import-packages-and-data",
    "href": "in_class_ex/in_class_ex_05/in_class_ex_05.html#import-packages-and-data",
    "title": "In-Class Exercise 5: Visualising Graph Data",
    "section": "",
    "text": "pacman::p_load(jsonlite, igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")"
  },
  {
    "objectID": "in_class_ex/in_class_ex_05/in_class_ex_05.html#preprocess-data",
    "href": "in_class_ex/in_class_ex_05/in_class_ex_05.html#preprocess-data",
    "title": "In-Class Exercise 5: Visualising Graph Data",
    "section": "Preprocess Data",
    "text": "Preprocess Data\nConvert SentDate to date format and add a Weekday column using lubridate functions:\n\nGAStech_edges %&lt;&gt;%\n  mutate(SentDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr =FALSE))\n\nAggregate the edges data by date, sender & receiver, main subject, and weekday:\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source != target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\nGenerate tidygraph object:\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated,\n                           directed = TRUE)"
  },
  {
    "objectID": "in_class_ex/in_class_ex_05/in_class_ex_05.html#plot-the-graph",
    "href": "in_class_ex/in_class_ex_05/in_class_ex_05.html#plot-the-graph",
    "title": "In-Class Exercise 5: Visualising Graph Data",
    "section": "Plot the Graph",
    "text": "Plot the Graph\n\nggraph(GAStech_graph,\n       layout='nicely') +\n  geom_edge_link(aes(width=Weight),\n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1,5)) +\n  geom_node_point(aes(color=Department),\n                  size=3) +\n  theme_graph()\n\n\n\n\n\nFaceted Edges\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n\ng + facet_edges(~Weekday)\n\n\n\n\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#importing-packages",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#importing-packages",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "",
    "text": "We first import the packages we wish to use for this exercise:\n\npacman::p_load(tidyverse, magrittr, janitor, lubridate, rstatix, patchwork, ggiraph, ggridges, ggstatsplot, ggdist, ggthemes, gganimate)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#visualising-demographics",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#visualising-demographics",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.1 Visualising: Demographics",
    "text": "3.1 Visualising: Demographics\nLet’s start by getting an idea of the profile of the residents of the city.\n\n3.1.1 What is the overall age distribution?\nWe can see that the age distribution of residents is quite uniform.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I used a histogram as it is the classic choice for visualising population age distribution. After some experimentation I chose a bin width of 3 to strike a balance between detail and being able to see the overall shape.\n\n\n\n\nShow Code\nggplot(data=participants,\n             aes(x=age, y=after_stat(count))) +\n  geom_histogram(binwidth=3, color='white') +\n  # geom_density() +\n  scale_x_continuous(name = \"age (years)\") +\n  ggtitle(\"Generally uniform age distribution\",\n          subtitle = \"Age is quite uniformly distributed.\")\n\n\n\n\n\n\n\n3.1.2 How big are households and do they have kids?\nHouseholds are small in the City of Engagement, ranging from 1 to 3 persons. 1- and 2-person households (majority, about 70%) only have adults, while 3-person households (close to 30%) have kids.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nI chose a bar chart rather than pie chart so that it would be easy to compare their relative proportion and difference, since their proportions are quite close. This is further emphasised by labeling the count and proportion explicitly on each bar. I also used colour to indicate the households that have kids (which corresponds exactly to the 3-person households).\n\n\n\n\nShow Code\nggplot(data=participants,\n       aes(y = fct_rev(fct_infreq(as.factor(householdSize))),\n           fill = haveKids)) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), sprintf(' (%.1f%%)', prop*100)), group=1), \n            stat='count', \n            hjust=1.2, \n            colour='white') +\n  ylab(\"Household Size\") +\n  theme(axis.ticks.y=element_blank(),\n        text = element_text(size=12)) +\n  scale_fill_discrete(name='', labels=c('No Kids', 'Have Kids')) +\n  ggtitle(\"Small households\",\n          subtitle = \"1- and 2-member (adult-only) households are most common. Largest household size is 3.\")\n\n\n\n\n\n\n\n3.1.3 How well-educated are residents?\nResidents are highly educated, with more than 90% having at least a high school or college education. In addition, almost a fifth have graduate degrees.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nI again used bar charts as it seemed to give the clearest representation of the relative number of residents at each level of education.\n\n\n\n\nShow Code\nggplot(data=participants,\n             aes(y=educationLevel)) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), '\\n', sprintf('(%.1f%%)', prop*100)), group=1),\n            stat='count',\n            hjust=1.2,\n            colour='white') +\n  ylab(\"Education Level\") +\n  scale_fill_brewer(palette = 'BuPu', name='Education Level') +\n  theme(axis.ticks.y=element_blank(),\n        text = element_text(size=12)) +\n  ggtitle(\"Well-educated residents\",\n          subtitle = \"More than 90% have at least high school/college education; \\nalmost 20% have graduate qualifications.\")\n\n\n\n\n\n\n\n3.1.4 Are more highly educated residents less likely to have kids?\nAt least in the City of Engagement, it is not true that the more highly educated you are, the less likely you are to have kids. There is no statistically significant relationship between education level and having kids.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I made use of the ggstatplot library to easily generate a statistical comparison chart to examine a possible relationship between education level and having kids. From the p-value, we can see that there is no statistical evidence to suggest an association between the two.\n\n\n\n\nShow Code\nggbarstats(data = participants,\n           x = haveKids,\n           y =educationLevel,\n           type = 'np')"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#other-visualisations",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#other-visualisations",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.5 Other Visualisations",
    "text": "3.5 Other Visualisations\n\n3.5.1 Does household size vary with age?\n\n\nShow Code\nggplot(data=participants,\n       aes(x=age, y=after_stat(count))) +\n  geom_density(data=select(participants, age), fill='grey', color='transparent', alpha=0.5) +\n  geom_density(alpha=0.5, fill='turquoise', color='turquoise') +\n  facet_wrap(~householdSize) +\n  ggtitle(\"No significant association between age and household size\")\n\n\n\n\n\n\n\n3.5.2 Does education level vary with age?\n\n\nShow Code\nggplot(data=participants,\n       aes(x=age, y=after_stat(count))) +\n  geom_density(data=select(participants, age), fill='grey', color='transparent', alpha=0.5) +\n  geom_density(alpha=0.5, fill='orange', color='orange') +\n  facet_wrap(~educationLevel, nrow=1) +\n  ggtitle(\"No significant association between age and education level\")\n\n\n\n\n\n\n\nShow Code\nggplot(participants,\n       aes(x=age, y=after_stat(count),fill=fct_rev(educationLevel), color=fct_rev(educationLevel))) +\n  geom_density(position='stack') +\n  scale_fill_brewer(palette = 'BuPu', name='Education Level') +\n  scale_color_brewer(palette = 'BuPu', name='Education Level') +\n  ggtitle(\"No significant variation in education level by age\")\n\n\n\n\n\n\n\n3.5.3 Are some interest groups more popular than others overall?\n\n\nShow Code\nggplot(data=participants,\n       aes(y = fct_rev(fct_infreq(interestGroup)))) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), sprintf(' (%.1f%%)', prop*100)), group=1), \n            stat='count', \n            hjust=1.2, \n            colour='white') +\n  ylab(\"Interest Group\") +\n  theme(axis.ticks.y=element_blank(),\n        text = element_text(size=12)) +\n  ggtitle(\"No significant difference in popularity of interest groups\")\n\n\n\n\n\n\n\n3.5.4 Does age profile vary between different interest groups?\n\n\nShow Code\nggplot(data=participants,\n       aes(x=age, y=after_stat(count))) +\n  geom_density(data=select(participants, age), fill='grey', color='grey', alpha=0.5) +\n  geom_density(alpha=0.5, fill='turquoise', color='turquoise') +\n  facet_wrap(~interestGroup) +\n  ggtitle(\"No significant association between age and interest group\")\n\n\n\n\n\n\n\n3.5.5 Wage distribution visualisation using ECDF\n\n\nShow Code\nggplot(fj_annual%&gt;%filter(category=='Wage'), \n       aes(x=amount_total, y=..y..)) +\n  stat_ecdf(geom = \"step\")\n\n\n\n\n\n\n\n3.5.6 Alternate visualisation of Distribution of spend amount in each expense category\n\n\nShow Code\nggplot(filter(fj_annual, category_type=='Expense'),\n       aes(x=abs(amount_total),\n           y=after_stat(count),\n           fill=category,\n           color=category)) +\n  geom_density(bw=500, alpha=0.5) +\n  scale_fill_discrete(name=\"Expense Category\") +\n  scale_color_discrete(name=\"Expense Category\") \n\n\n\n\n\n\n\n3.5.7 Total expenses percent versus income\n\n\nShow Code\np_fj_annual_spread &lt;- p_fj_annual %&gt;%\n  select(-category_type) %&gt;%\n  spread(category, amount_total, fill=0) %&gt;%\n  mutate(income_total = Wage+RentAdjustment) %&gt;%\n  mutate(expense_total = Shelter+Recreation+Food+Education) %&gt;%\n  mutate(expense_pct = expense_total/income_total)\n\nggplot(p_fj_annual_spread,\n       aes(x=income_total,\n           y=abs(expense_pct),\n           fill=educationLevel,\n           size=householdSize)) +\n  geom_point(pch=21, color='white', alpha=0.7) +\n  scale_x_continuous(name = 'Income',\n                     limits = c(0,250000),\n                     labels = scales::comma) +\n  scale_y_continuous(name = 'Expense as percent of income',\n                     limits = c(0,1),\n                     labels = scales::percent_format()) +\n  scale_radius(\n    name = \"Household Size\",\n    range = c(1, 3),\n    limits = c(1, 3),\n    breaks = c(1, 2, 3),\n    guide = guide_legend(\n      override.aes = list(fill = \"gray40\"))) +\n  theme_minimal()"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#visualising-financials",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#visualising-financials",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.2 Visualising: Financials",
    "text": "3.2 Visualising: Financials\n\n3.2.1 What does the overall finances of residents look like?\nAt the aggregate level, expenses are about a third of income. We also see the largest income category (Wages) and largest expense category (Shelter).\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I used two bar charts to compare income and expenses. They are two separate charts that were combined using patchwork. Care was taken to ensure that the two x-axis were the same scale, so that direct comparisons between the two charts are possible. Lastly, ggiraph library was used to add interactive tooltips showing the exact amount for each category.\n\n\n\n\nShow Code\np1 &lt;- ggplot(fj_annual%&gt;%group_by(category)%&gt;%summarise(total=sum(amount_total))%&gt;%filter(total&gt;0),\n       aes(x='Income', y=total, fill=fct_infreq(category, total))) +\n  geom_col_interactive(aes(tooltip=paste0(category, ': ', sprintf('%.0f', abs(total)))), \n                       position=position_stack(reverse=TRUE)) +\n  scale_y_continuous(name = 'Amount',\n                     limits = c(0,5e7),\n                     labels = scales::comma) +\n  coord_flip() +\n  xlab('') +\n  scale_fill_brewer(palette = 'Set1', name = 'Income Categories') +\n  theme(axis.text.y = element_text(size=12))\n\np2 &lt;- ggplot(fj_annual%&gt;%group_by(category)%&gt;%summarise(total=sum(amount_total))%&gt;%filter(total&lt;0),\n       aes(x='Expense', y=abs(total), fill=fct_infreq(category, abs(total)))) +\n  geom_col_interactive(aes(tooltip=paste0(category, ': ', sprintf('%.0f', abs(total)))), \n                       position=position_stack(reverse=TRUE)) +\n  scale_y_continuous(name = 'Amount',\n                     limits = c(0,5e7),\n                     labels = scales::comma) +\n  coord_flip() +\n  xlab('') +\n  scale_fill_brewer(palette = 'Set2', name = 'Expense Categories') +\n  theme(axis.text.y = element_text(size=12))\n\np12 &lt;- (p1/p2) +\n  plot_annotation(\n    title = \"In aggregate (Mar 2022 - Feb 2023), residents spent about a third of their income\",\n    subtitle = \"Almost all income comes from Wages, and Shelter is the largest expense.\"\n  )\n\ngirafe(code = print(p12),\n       width_svg = 10,\n       height_svg = 4)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#visualising-overall-financials",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#visualising-overall-financials",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.2 Visualising: Overall Financials",
    "text": "3.2 Visualising: Overall Financials\n\n3.2.1 What does the overall finances of residents look like?\nAt the aggregate level, expenses are about a third of income. We also see the largest income category (Wages) and largest expense category (Shelter).\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I used two separate bar charts to compare income and expenses, that were combined using patchwork. Care was taken to ensure that the two x-axis were the same scale, so that direct comparisons between the two charts are possible. Lastly, ggiraph library was used to add interactive tooltips showing the exact amount for each category.\n\n\n\n\nShow Code\np1 &lt;- ggplot(fj_annual%&gt;%group_by(category)%&gt;%summarise(total=sum(amount_total))%&gt;%filter(total&gt;0),\n       aes(x='Income', y=total, fill=fct_infreq(category, total))) +\n  geom_col_interactive(aes(tooltip=paste0(category, ': ', sprintf('%.0f', abs(total)))), \n                       position=position_stack(reverse=TRUE)) +\n  scale_y_continuous(name = 'Amount',\n                     limits = c(0,5e7),\n                     labels = scales::comma) +\n  coord_flip() +\n  xlab('') +\n  scale_fill_brewer(palette = 'Set1', name = 'Income Categories') +\n  theme(axis.text.y = element_text(size=12))\n\np2 &lt;- ggplot(fj_annual%&gt;%group_by(category)%&gt;%summarise(total=sum(amount_total))%&gt;%filter(total&lt;0),\n       aes(x='Expense', y=abs(total), fill=fct_infreq(category, abs(total)))) +\n  geom_col_interactive(aes(tooltip=paste0(category, ': ', sprintf('%.0f', abs(total)))), \n                       position=position_stack(reverse=TRUE)) +\n  scale_y_continuous(name = 'Amount',\n                     limits = c(0,5e7),\n                     labels = scales::comma) +\n  coord_flip() +\n  xlab('') +\n  scale_fill_brewer(palette = 'Set2', name = 'Expense Categories') +\n  theme(axis.text.y = element_text(size=12))\n\np12 &lt;- (p1/p2) +\n  plot_annotation(\n    title = \"In aggregate (Mar 2022 - Feb 2023), residents spent about a third of their income\",\n    subtitle = \"Almost all income comes from Wages, and Shelter is the largest expense.\"\n  )\n\ngirafe(code = print(p12),\n       width_svg = 10,\n       height_svg = 4)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#visualising-income",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#visualising-income",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.3 Visualising: Income",
    "text": "3.3 Visualising: Income\n\n3.3.1 How are annual wages distributed?\nWe can see that wage distribution is highly skewed, i.e. a large number of residents earning low- to medium-level wages, and a small number of residents earning high wages.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I used a so-called raincloud plot to visualise the distribution of income. It comprises a density plot, boxplot and dotplot. Each sub-component communicates a different aspect of the data. The density plot most clearly shows how the data is skewed. The boxplot indicates the median, quartiles and outlier range. The dotplot shows the relative quantity of data points at each wage level, something that is not apparent with just density plot or boxplot.\n\n\n\n\nShow Code\nggplot(fj_annual%&gt;%filter(category=='Wage'), \n       aes(x='',y = amount_total)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = 1000,\n            dotsize = .5) +\n  coord_flip(ylim=c(0,225000)) +\n  scale_y_continuous(name = 'Annual Wage',\n                     limits = c(0,5e7),\n                     labels = scales::comma) +\n  xlab('') +\n  theme(axis.ticks.y=element_blank()) +\n  theme_minimal() +\n  ggtitle(\"Annual wage distribution is highly skewed\",\n          subtitle=\"Median wage is less than $50K; highest more than $200K\") \n\n\n\n\n\n\n\n3.3.2 Do wages vary across the months of the year?\nWe see that monthly wages remain quite stable over the course of a year, except for a spike in March which could be attributed to residents receiving some sort of annual bonus.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nI felt the classic boxplot did the best job of showing how the distribution of wages in each month remained quite consisent over the course of a year. I tried using a ridgeline plot, but it was not effective as all the plots would overlap almost completely with each other.\n\n\n\n\nShow Code\nggplot(fj_monthly%&gt;%filter(category=='Wage'), \n       aes(y=amount_total,x=timestamp_month)) +\n  geom_boxplot() +\n  scale_y_continuous(name = 'Amount',\n                     labels = scales::comma) +\n  xlab('Year-Month') +\n  theme_minimal() +\n  ggtitle(\"Wages are consistent over most of the year...\",\n          subtitle = \"... Except for a spike in March.\")\n\n\n\n\n\n\n\n3.3.3 What factors correlate with wages?\n\n\nShow Code\np_fj_annual &lt;- participants %&gt;%\n  right_join(fj_annual, by='participantId')\n\n\n\n3.3.3.1 Education Level\n\n\nShow Code\nggplot(\n  data = filter(p_fj_annual, category=='Wage'),\n  aes(x = educationLevel,\n      y = amount_total)) +\n  stat_pointinterval() +\n  ggtitle(\"Confidence interval of mean wages\")\n\n\n\n\n\n\n\nShow Code\nggbetweenstats(\n  data = filter(p_fj_annual, category=='Wage'),\n  x = educationLevel,\n  y = amount_total,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE,\n  title = \"Wage increases significantly with higher education level\",\n  xlab = \"Education Level\",\n  ylab = \"Wage\"\n)\n\n\n\n\n\n\n\n3.3.3.2 Joviality\n\n\nShow Code\nggplot(filter(p_fj_annual, category=='Wage'),\n       aes(y=joviality, \n           x=amount_total,\n           fill=educationLevel,\n           size=householdSize)) +\n  geom_point(pch=21, color='white', alpha=0.7) +\n  scale_x_continuous(name = \"Wage\") +\n  scale_y_continuous(name = \"Joviality\") +\n  scale_fill_discrete(name=\"Education Level\") +\n  scale_radius(\n    name = \"Household Size\",\n    range = c(1, 3),\n    limits = c(1, 3),\n    breaks = c(1, 2, 3),\n    guide = guide_legend(\n      override.aes = list(fill = \"gray40\"))) +\n  theme_minimal() +\n  ggtitle(\"Joviality trends downards at high wages\",\n          subtitle = \"At lower wages, wages and joviality are not strongly related\")"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#joining-participant-and-financial-journal-data",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#joining-participant-and-financial-journal-data",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "2.6 Joining Participant and Financial Journal data",
    "text": "2.6 Joining Participant and Financial Journal data\nIn order to examine relationships between demographics and finances, it is necessary to join the two datasets. Here, we join the demographics data with the annual financial data:\n\n\nShow Code\np_fj_annual &lt;- participants %&gt;%\n  right_join(fj_annual, by='participantId')"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#demographics",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#demographics",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.1 Demographics",
    "text": "3.1 Demographics\nLet’s start by getting an idea of the profile of the residents of the city.\n\n3.1.1 What is the overall age distribution?\nWe can see that the age distribution of residents is quite uniform.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I used a histogram as it is the classic choice for visualising population age distribution. After some experimentation I chose a bin width of 3 to strike a balance between detail and being able to see the overall shape.\n\n\n\n\nShow Code\nggplot(data=participants,\n             aes(x=age, y=after_stat(count))) +\n  geom_histogram(binwidth=3, color='white') +\n  # geom_density() +\n  scale_x_continuous(name = \"age (years)\") +\n  ggtitle(\"Generally uniform age distribution\",\n          subtitle = \"Age is quite uniformly distributed.\")\n\n\n\n\n\n\n\n3.1.2 How big are households and do they have kids?\nHouseholds are small in the City of Engagement, ranging from 1 to 3 persons. 1- and 2-person households (majority, about 70%) only have adults, while 3-person households (close to 30%) have kids.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nI chose a bar chart rather than pie chart so that it would be easy to compare their relative proportion and difference, since their proportions are quite close. This is further emphasised by labeling the count and proportion explicitly on each bar. I also used colour to indicate the households that have kids (which corresponds exactly to the 3-person households).\n\n\n\n\nShow Code\nggplot(data=participants,\n       aes(y = fct_rev(fct_infreq(as.factor(householdSize))),\n           fill = haveKids)) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), sprintf(' (%.1f%%)', prop*100)), group=1), \n            stat='count', \n            hjust=1.2, \n            colour='white') +\n  ylab(\"Household Size\") +\n  theme(axis.ticks.y=element_blank(),\n        text = element_text(size=12)) +\n  scale_fill_discrete(name='', labels=c('No Kids', 'Have Kids')) +\n  ggtitle(\"Small households\",\n          subtitle = \"1- and 2-member (adult-only) households are most common. Largest household size is 3.\")\n\n\n\n\n\n\n\n3.1.3 How well-educated are residents?\nResidents are highly educated, with more than 90% having at least a high school or college education. In addition, almost a fifth have graduate degrees.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nI again used bar charts as it seemed to give the clearest representation of the relative number of residents at each level of education.\n\n\n\n\nShow Code\nggplot(data=participants,\n             aes(y=educationLevel)) +\n  geom_bar() +\n  geom_text(aes(label=paste0(after_stat(count), '\\n', sprintf('(%.1f%%)', prop*100)), group=1),\n            stat='count',\n            hjust=1.2,\n            colour='white') +\n  ylab(\"Education Level\") +\n  scale_fill_brewer(palette = 'BuPu', name='Education Level') +\n  theme(axis.ticks.y=element_blank(),\n        text = element_text(size=12)) +\n  ggtitle(\"Well-educated residents\",\n          subtitle = \"More than 90% have at least high school/college education; \\nalmost 20% have graduate qualifications.\")\n\n\n\n\n\n\n\n3.1.4 Are more highly educated residents less likely to have kids?\nAt least in the City of Engagement, it is not true that the more highly educated you are, the less likely you are to have kids. There is no statistically significant relationship between education level and having kids.\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I made use of the ggstatplot library to easily generate a statistical comparison chart to examine a possible relationship between education level and having kids. From the p-value, we can see that there is no statistical evidence to suggest an association between the two.\n\n\n\n\nShow Code\nggbarstats(data = participants,\n           x = haveKids,\n           y =educationLevel,\n           type = 'np')"
  },
  {
    "objectID": "take_home_ex/take_home_ex_01/take_home_ex_01.html#overall-financials",
    "href": "take_home_ex/take_home_ex_01/take_home_ex_01.html#overall-financials",
    "title": "Take-Home Exercise 1: City of Engagement",
    "section": "3.2 Overall Financials",
    "text": "3.2 Overall Financials\n\n3.2.1 What does the overall finances of residents look like?\nAt the aggregate level, expenses are about a third of income. We also see the largest income category (Wages) and largest expense category (Shelter).\n\n\n\n\n\n\nVisualisation Design Choice\n\n\n\nHere I used two separate bar charts to compare income and expenses, that were combined using patchwork. Care was taken to ensure that the two x-axis were the same scale, so that direct comparisons between the two charts are possible. Lastly, ggiraph library was used to add interactive tooltips showing the exact amount for each category.\n\n\n\n\nShow Code\np1 &lt;- ggplot(fj_annual%&gt;%group_by(category)%&gt;%summarise(total=sum(amount_total))%&gt;%filter(total&gt;0),\n       aes(x='Income', y=total, fill=fct_infreq(category, total))) +\n  geom_col_interactive(aes(tooltip=paste0(category, ': ', sprintf('%.0f', abs(total)))), \n                       position=position_stack(reverse=TRUE)) +\n  scale_y_continuous(name = 'Amount',\n                     limits = c(0,5e7),\n                     labels = scales::comma) +\n  coord_flip() +\n  xlab('') +\n  scale_fill_brewer(palette = 'Set1', name = 'Income Categories') +\n  theme(axis.text.y = element_text(size=12))\n\np2 &lt;- ggplot(fj_annual%&gt;%group_by(category)%&gt;%summarise(total=sum(amount_total))%&gt;%filter(total&lt;0),\n       aes(x='Expense', y=abs(total), fill=fct_infreq(category, abs(total)))) +\n  geom_col_interactive(aes(tooltip=paste0(category, ': ', sprintf('%.0f', abs(total)))), \n                       position=position_stack(reverse=TRUE)) +\n  scale_y_continuous(name = 'Amount',\n                     limits = c(0,5e7),\n                     labels = scales::comma) +\n  coord_flip() +\n  xlab('') +\n  scale_fill_brewer(palette = 'Set2', name = 'Expense Categories') +\n  theme(axis.text.y = element_text(size=12))\n\np12 &lt;- (p1/p2) +\n  plot_annotation(\n    title = \"In aggregate (Mar 2022 - Feb 2023), residents spent about a third of their income\",\n    subtitle = \"Almost all income comes from Wages, and Shelter is the largest expense.\"\n  )\n\ngirafe(code = print(p12),\n       width_svg = 10,\n       height_svg = 4)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "",
    "text": "In this Hands-On Exercise, we explore different visual analytics tools and techniques for multidimensional data."
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#preparation",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#preparation",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "1.1 Preparation",
    "text": "1.1 Preparation\n\n1.1.1 Install and launch R packages\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\n1.1.2 Import and prepare dataset\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#correlation-visualisation-methods",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#correlation-visualisation-methods",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "1.2 Correlation Visualisation Methods",
    "text": "1.2 Correlation Visualisation Methods\n\n1.2.1 Scatterplot matrix using pairs() method\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\n  usr &lt;- par(\"usr\")\n  on.exit(par(usr))\n  par(usr = c(0, 1, 0, 1))\n  r &lt;- abs(cor(x, y, use=\"complete.obs\"))\n  txt &lt;- format(c(r, 0.123456789), digits=digits)[1]\n  txt &lt;- paste(prefix, txt, sep=\"\")\n  if(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\n  text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[1:12],\n      upper.panel = panel.cor) # option to hide the upper triangle or display correlation coefficient\n\n\n\n\n\n\n1.2.2 Correlogram using ggcormat() method\n\nggstatsplot::ggcorrmat(data=wine,\n                       cor.vars = 1:11,\n                       ggcorrplot.args = list(outline.color='black',\n                                              hc.order = TRUE,\n                                              tl.cex = 10),\n                       title = \"Correlogram for Wine dataset\",\n                       subtitle = \"Four pairs are not significant at p &lt; 0.05\")\n\n\n\n\nGrouped correlogram (by type):\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n1.2.3 Correlogram using corrplot package\n\n# Need to compute correlation matrix in R first\nwine.cor &lt;- cor(wine[1:11])\nwine.sig = cor.mtest(wine.cor, conf.level = 0.95)\n\ncorrplot(wine.cor,\n         method = 'ellipse',\n         type = 'lower',\n         diag = FALSE,\n         tl.col = 'black',\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = 0.05)\n\n\n\n\nAdding additional info to upper triangle:\n\ncorrplot.mixed(wine.cor,\n               lower = 'ellipse',\n               upper = 'number',\n               tl.pos = 'lt',\n               diag = 'l',\n               order = 'AOE',\n               tl.col = 'black')\n\n\n\n\nDrawing rectangles based on hierarchical clustering:\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#preparation-1",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#preparation-1",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "2.1 Preparation",
    "text": "2.1 Preparation\n\n2.1.1 Install and launch R packages\n\npacman::p_load(plotly, tidyverse)\n\n\nlibrary(ggtern)\n\n\n\n2.1.2 Import and prepare dataset\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#static-ternary-plot",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#static-ternary-plot",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "2.2 Static Ternary Plot",
    "text": "2.2 Static Ternary Plot\n\nggtern(data = agpop_mutated,\n       aes(x=YOUNG,\n           y=ACTIVE,\n           z=OLD)) +\n  geom_point() +\n  labs(title = \"Population structure, 2018\") +\n  theme_rgbw()"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#interactive-ternary-plot",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#interactive-ternary-plot",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "2.3 Interactive Ternary Plot",
    "text": "2.3 Interactive Ternary Plot\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  text = ~SZ,\n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#preparation-2",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#preparation-2",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "3.1 Preparation",
    "text": "3.1 Preparation\n\n3.1.1 Install and launch R packages\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\n3.1.2 Import and prepare dataset\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\nrow.names(wh) &lt;- wh$Country\n\n\nwh1 &lt;- wh %&gt;%\n  select(c(3, 7:12))\n\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#static-heatmaps",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#static-heatmaps",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "3.2 Static Heatmaps",
    "text": "3.2 Static Heatmaps\n\n3.2.1 heatmap() of R Stats\n\n3.2.1.1 Basic (no clustering)\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n3.2.1.2 With clustering and scaling\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#interactive-heatmaps-using-heatmaply-package",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#interactive-heatmaps-using-heatmaply-package",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "3.3 Interactive Heatmaps using heatmaply package",
    "text": "3.3 Interactive Heatmaps using heatmaply package\n\n3.3.1 Basic\n\nheatmaply(wh_matrix[, -c(1,2,4,5)],\n          scale = 'column')\n\n\n\n\n\n\n\n3.3.2 Normalised\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#preparation-3",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#preparation-3",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "4.1 Preparation",
    "text": "4.1 Preparation\n\n4.1.1 Install and launch R packages\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\n4.1.2 Import and prepare dataset\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#static-parallel-coordinates-plot",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#static-parallel-coordinates-plot",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "4.2 Static Parallel Coordinates Plot",
    "text": "4.2 Static Parallel Coordinates Plot\n\n4.2.1 Basic\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n4.2.2 With added boxplot\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n4.2.3 With facet\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happiness Variables by Region\") +\n  facet_wrap(~ Region) +\n  theme(axis.text.x = element_text(angle=30, hjust=1))"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#interactive-parallel-coordinates-plot",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#interactive-parallel-coordinates-plot",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "4.3 Interactive Parallel Coordinates Plot",
    "text": "4.3 Interactive Parallel Coordinates Plot\n\nparallelPlot(select(wh, \"Happiness score\", c(7:12)),\n             width = 320,\n             height = 350,\n             continuousCS = 'YlOrRd',\n             rotateTitle = TRUE,\n             histoVisibility = rep(TRUE, 7))"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#preparation-4",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#preparation-4",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "5.1 Preparation",
    "text": "5.1 Preparation\n\n5.1.1 Install and launch R packages\n\npacman::p_load(treemap, treemapify, tidyverse) \n\n\n\n5.1.2 Import and prepare dataset\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;%\n  group_by(`Project Name`, `Planning Region`, `Planning Area`, `Property Type`, `Type of Sale`) %&gt;%\n  summarise(`Total Units Sold` = sum(`No. of Units`, na.rm = TRUE),\n            `Total Area (sqm)` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price ($)` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#static-treemaps",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#static-treemaps",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "5.2 Static Treemaps",
    "text": "5.2 Static Treemaps\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == 'Condominium', `Type of Sale` == 'Resale')\n\n\n5.2.1 Using treemap package\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Units Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\", # default is \"index\", which colors by hierarchy\n        palette = \"RdYlBu\",\n        sortID = \"Median Transacted Price ($)\",\n        title=\"Resale Condominium by Planning Region and Area, 2018\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n5.2.1.1 Changing the layout\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Units Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"manual\", # default is \"index\", which colors by hierarchy\n        palette = \"Blues\",\n        algorithm = \"squarified\", # default is \"pivotSize\"\n        title=\"Resale Condominium by Planning Region and Area, 2018\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n5.2.2 Using treemapify package\n\n5.2.2.1 Basic\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Units Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n5.2.2.2 Adding hierarchy\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Units Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`),\n       start = \"topleft\") + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour='gray70', size=2) +\n  geom_treemap_subgroup_border(colour='white') # note reverse order of plotting"
  },
  {
    "objectID": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#interactive-treemaps-using-d3treer",
    "href": "hands_on_ex/hands_on_ex_06/hands_on_ex_06.html#interactive-treemaps-using-d3treer",
    "title": "Hands-On Exercise 6: Multivariate Analysis",
    "section": "5.3 Interactive Treemaps using d3treeR",
    "text": "5.3 Interactive Treemaps using d3treeR\n\nlibrary(d3treeR)\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Units Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2018\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nd3tree(tm, rootname = \"Singapore\")"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#setting-the-scene",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#setting-the-scene",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "1.1 Setting the Scene",
    "text": "1.1 Setting the Scene\nThe following text is lifted from the Challenge webpage. Emphases are my own.\nThe country of Oceanus has sought FishEye International’s help in identifying companies possibly engaged in illegal, unreported, and unregulated (IUU) fishing. As part of the collaboration, FishEye’s analysts received import/export data for Oceanus’ marine and fishing industries. However, Oceanus has informed FishEye that the data is incomplete. To facilitate their analysis, FishEye transformed the trade data into a knowledge graph. Using this knowledge graph, they hope to understand business relationships, including finding links that will help them stop IUU fishing and protect marine species that are affected by it. FishEye analysts found that node-link diagrams gave them a good high-level overview of the knowledge graph. However, they are now looking for visualizations that provide more detail about patterns for entities in the knowledge graph. There are two main parts to this analysis.\nFirst, FishEye knows from past experience that companies caught fishing illegally will shut down but will then often start up again under a different name. FishEye wants your help to visualize temporal patterns so they can compare the activities of companies over time to determine if the companies have returned to their nefarious acts.\nSecond, FishEye has been using several tools, including artificial intelligence, to reason on the knowledge graph and suggest links that could extend the dataset. They have supplied 12 groups of link suggestions and need your help evaluating these groups to identify which tools are most reliable for completing the graph. FishEye is especially interested in identifying new temporal patterns or anomalies that are only present when new links are added.\nUsing visual analytics, can you help FishEye identify companies that may be engaged in illegal fishing?"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#the-task",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#the-task",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "1.2 The Task",
    "text": "1.2 The Task\nUsing appropriate static and interactive statistical graphics methods, help FishEye identify companies that may be engaged in illegal fishing, by answering one of the following four questions listed on the Mini-Challenge 2 webpage:\n\nUse visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find.\nEvaluate the sets of predicted knowledge graph links FishEye has provided using visual analytics. Which sets are most reliable for completing the graph?\nIllustrate how your visual analytics approach can be used to identify new patterns and/or anomalies that are present in the knowledge graph after you have added the links you deemed reliable in question 2.\nIdentify companies that fit a pattern of illegal fishing. Use visualizations to support your conclusions and your confidence in them.\n\nI will be attempting the first question:\nUse visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find."
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#section",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#section",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "1.3 ",
    "text": "1.3 \n\n\nShow Code\n# MC1 &lt;- fromJSON('data/MC1.json')\n# \n# # using select to project and rearrange wanted columns\n# \n# MC1_nodes &lt;- as_tibble(MC1$nodes) %&gt;%\n#   select(id, type, country)\n# \n# MC1_edges &lt;- as_tibble(MC1$links) %&gt;%\n#   select(source, target, type, weight, key)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#data-overview",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#data-overview",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "3.1 Data Overview",
    "text": "3.1 Data Overview\nAccording to the provided data dictionary, the main graph has 34,552 nodes and 5,464,092 directed edges (note: file size ~1.55GB). Each edge represents a shipment from a shipper to a receiver.\n\n3.1.1 Node Attributes\n\n\n\n\n\n\n\n\nAttribute\nData Type (assumed)\nDescription\n\n\n\n\nid\nchar\nName of the company that originated (or received) the shipment\n\n\nshpcountry\nchar\nCountry the company most often associated with when shipping\n\n\nrcvcountry\nchar\nCountry the company most often associated with when receiving\n\n\ndataset\nchar\nAlways ‘MC2’\n\n\n\n\n\n3.1.2 Edge Attributes\n\n\n\n\n\n\n\n\nAttribute\nData Type (assumed)\nDescription\n\n\n\n\narrivaldate\ndate\nDate the shipment arrived at port in YYYY-MM-DD format\n\n\nhscode\nchar\nHarmonized System code for the shipment. Can be joined with the hscodes table to get additional details\n\n\nvalueofgoods_omu\ninteger\nCustoms-declared value of the total shipment, in Oceanus Monetary Units OMU\n\n\nvolumeteu\ninteger\nThe volume of the shipment in ‘Twenty-foot equivalent units’, roughly how many 20-foot standard containers would be required. Actual number of containers may have been different as there are 20ft and 40ft standard containers and tankers that do not use containers)\n\n\nweightkg\ninteger\nThe weight of the shipment in kilograms (if known)\n\n\ndataset\nchar\nAlways ‘MC2’\n\n\ntype\nchar\nAlways ‘shipment’ for MC2\n\n\ngenerated_by\nchar\nName of the program that generated the edge. (Only found on ‘bundle’ records)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#entities",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#entities",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "4.1 Entities",
    "text": "4.1 Entities\n\n4.1.1 Companies\nOf the companies, about 30% (2,797) do not have a name, only an ID number:\n\n\nShow Code\nMC2_nodes %&gt;%\n  select(id) %&gt;%\n  distinct() %&gt;%\n  filter(str_detect(id, regex(r\"(-\\d+$)\")))\n\n\n# A tibble: 2,797 × 1\n   id    \n   &lt;chr&gt; \n 1 -1143 \n 2 -6894 \n 3 -12516\n 4 -1515 \n 5 -193  \n 6 -54   \n 7 -21759\n 8 -214  \n 9 -987  \n10 -754  \n# ℹ 2,787 more rows\n\n\n\n\n4.1.2 Countries\nLet’s see which countries appear most frequently ship to, and receive shipments from, Oceanus. First, count the countries:\n\n\nShow Code\nMC2_nodes_shpToOceanus &lt;- MC2_nodes %&gt;%\n  filter(shpcountry!='Oceanus' & rcvcountry=='Oceanus') %&gt;%\n  group_by(shpcountry) %&gt;%\n  filter(!is.na(shpcountry)) %&gt;%\n  summarise(count = n())\n\nMC2_nodes_rcvFrOceanus &lt;- MC2_nodes %&gt;%\n  filter(shpcountry=='Oceanus' & rcvcountry!='Oceanus') %&gt;%\n  group_by(rcvcountry) %&gt;%\n  filter(!is.na(rcvcountry)) %&gt;%\n  summarise(count = n())\n\n# unused for now\nMC2_nodes_gathered &lt;- MC2_nodes %&gt;%\n  filter(shpcountry=='Oceanus' | rcvcountry=='Oceanus') %&gt;%\n  gather(\"shprcvcountry\", \"country\", -id, na.rm = TRUE) %&gt;%\n  group_by(country, shprcvcountry) %&gt;%\n  filter(country!='Oceanus') %&gt;%\n  summarise(count=n()) \n  # spread(shprcvcountry, count, fill = 0)\n\n\nThen, plot the countries:\n\n\nShow Code\np1 &lt;- ggplot(slice_max(MC2_nodes_shpToOceanus, order_by = count, n=20),\n       aes(y=fct_reorder(shpcountry, count),\n           x=count)) +\n  geom_col() +\n  scale_x_continuous(name = 'No. of Companies', position='top', limits=c(0,1700), expand=c(0,0)) +\n  scale_y_discrete(name = 'Country') +\n  theme_minimal() +\n  theme(axis.ticks.y=element_blank()) +\n  labs(title = \"Top 20 countries most often exporting to Oceanus\",\n       )\n\np2 &lt;- ggplot(slice_max(MC2_nodes_rcvFrOceanus, order_by = count, n=20, with_ties = FALSE),\n       aes(y=fct_reorder(rcvcountry, count),\n           x=count)) +\n  geom_col() +\n  scale_x_continuous(name = 'No. of Companies', position='top', limits=c(0,17), expand=c(0,0)) +\n  scale_y_discrete(name = 'Country') +\n  theme_minimal() +\n  theme(axis.ticks.y=element_blank()) +\n  labs(title = \"Top 20 countries most often importing from Oceanus\",\n       )\n\np1 + p2\n\n\n\n\n\nFrom the above graph, we can see that for companies that have Oceanus as their most common receiving country, the most common shipping country is Marebak. On the other hand, for companies that have Oceanus as their most common shipping country, the most common receiving country is Coralmarica. Note the dramatically different x-axis scales: far more most commonly companies ship to Oceanus than receive from Oceanus."
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#data-cleaning-conversion-to-graph",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#data-cleaning-conversion-to-graph",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "3.2 Data Cleaning & Conversion to Graph",
    "text": "3.2 Data Cleaning & Conversion to Graph\n\n3.2.1 Main Graph\nLet’s load the main graph JSON data first. (This takes a while due to the size of the file.) Then persist it for faster loading next time.\n\nif (file.exists('data/mc2.rds')) {\n  MC2 &lt;- read_rds('data/mc2.rds')\n} else {\n   MC2 &lt;- fromJSON('data/mc2_challenge_graph.json')\n   write_rds(MC2, 'data/mc2.rds')\n}\n\nThen, we convert the data to a “tidy” format using tidygraph methods, excluding unneeded columns at the same time. (Note: there’s a discrepancy between the data dictionary and data — there’s no type attribute found in the edges data.)\n\nMC2_nodes &lt;- as_tibble(MC2$nodes) %&gt;%\n  select(!dataset) \n\nMC2_edges &lt;- as_tibble(MC2$links) %&gt;%\n  select(!dataset)\n\nNext, we double-check the columns and correct data types as necessary.\n\nWe discover that there is an additional attribute in edges, named valueofgoodsusd, which we will leave in place for now.\nThe edge attribute arrivaldate has been interpreted as a char type. Let’s change it to a date type:\n\n\nMC2_edges %&lt;&gt;% mutate(arrivaldate = ymd(arrivaldate))\n\n\nThe HS Codes appear problematic. According to online research, the first 6 digits of HS Code should be consistent across countries, while the subsequent digits may differ. However, the most common HS code in the data, 306170, is not even a valid HS code. My suspicion is that there is a missing leading 0, i.e. the correct code is actually 030617 (possibly with subsequent digits). This could have been the result of incorrect data storage/export: the leading 0 may not have been stored, and the export function may have simply extracted the first 6 digits of the data. Using the full list of HS Codes published by Singapore Customs as a reference, let’s examine what HS Codes might be erroneous:\n\n\n\nShow Code\n# HS Codes provided by Singapore Customs\ntradenet_hscodes &lt;- read_xls('data/AllHSCode20230527155627.xls')\n\ncode_6d &lt;- tradenet_hscodes %&gt;%\n  transmute(hscode = substring(`HS Code`,1,6)) %&gt;%\n  pull(hscode)\n\nMC2_invalid_hscodes &lt;- MC2_edges %&gt;%\n  select(hscode) %&gt;%\n  group_by(hscode) %&gt;%\n  summarise(cnt = n()) %&gt;%\n  mutate(validcode = hscode %in% code_6d) %&gt;%\n  filter(validcode == FALSE) %&gt;%\n  pull(hscode)\n\n\nAmong these, since our use case involves fishing, we would be particularly interested in correcting HS Codes related to fish, seafood, etc. From the World Customs Organization website, these would be codes from Chapter 3 (Fish and crustaceans, molluscs and other aquatic invertebrates), specifically 0301-0309 (erroneously coded as 301xxx to 309xxx in our data). So let’s correct these:\n\n\nShow Code\nMC2_edges %&lt;&gt;%\n  mutate(hscode_corrected = if_else(hscode %in% MC2_invalid_hscodes & strtoi(substr(hscode,1,3))&gt;=301 & strtoi(substr(hscode,1,3))&lt;=309,\n                                    paste0('0', substr(hscode,1,5)),\n                                    hscode)) %&gt;%\n  select(!hscode) %&gt;%\n  rename(hscode = hscode_corrected)\n\n\nLet’s check for possible duplicate shipment records. We see there are about 100K duplicate shipment records in the dataset. We can remove them when we create the edges for the graph.\n\nMC2_edges %&gt;%\n  distinct() %&gt;%\n  summarise(n())\n\n# A tibble: 1 × 1\n    `n()`\n    &lt;int&gt;\n1 5309087\n\n\nFinally, we create a tidygraph object from the nodes and edges data, using only fishing-related edges (i.e. starting with 03) and their corresponding nodes:\n\n# reorder columns to what tidygraph expects\nMC2_edges %&lt;&gt;%\n  filter(substr(hscode,1,2)=='03') %&gt;%\n  relocate(source, target) %&gt;%\n  distinct()\n\nMC2_node_ids &lt;- bind_rows(\n  MC2_edges %&gt;% select(id=source),\n  MC2_edges %&gt;% select(id=target)) %&gt;%\n  distinct()\n\nMC2_nodes %&lt;&gt;%\n  filter(id %in% pull(MC2_node_ids,id)) %&gt;%\n  relocate(id)\n\n\nMC2_graph &lt;- tbl_graph(nodes = MC2_nodes,\n                       edges = MC2_edges,\n                       directed = TRUE)\n\nAfter cutting down our data, we are left with about a quarter of the original number of nodes, and a tenth of the original number of edges:\n\nprint(MC2_nodes %&gt;% summary())\n\n      id             shpcountry         rcvcountry       \n Length:9048        Length:9048        Length:9048       \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n\nprint(MC2_edges %&gt;% summary())\n\n    source             target           arrivaldate         valueofgoods_omu  \n Length:547725      Length:547725      Min.   :2028-01-01   Min.   :    5705  \n Class :character   Class :character   1st Qu.:2029-11-29   1st Qu.:  398655  \n Mode  :character   Mode  :character   Median :2031-09-08   Median :  760180  \n                                       Mean   :2031-08-15   Mean   : 2118449  \n                                       3rd Qu.:2033-05-28   3rd Qu.: 1654955  \n                                       Max.   :2034-12-30   Max.   :44744530  \n                                                            NA's   :547566    \n   volumeteu            weightkg         valueofgoodsusd        hscode         \n Min.   :   0.0000   Min.   :        0   Min.   :        0   Length:547725     \n 1st Qu.:   0.0000   1st Qu.:    18150   1st Qu.:    75905   Class :character  \n Median :   0.0000   Median :    20360   Median :   133075   Mode  :character  \n Mean   :   0.3802   Mean   :    22716   Mean   :   164421                     \n 3rd Qu.:   0.0000   3rd Qu.:    23015   3rd Qu.:   196102                     \n Max.   :1215.0000   Max.   :131710670   Max.   :111432620                     \n NA's   :606                             NA's   :19914                         \n\n\n\n3.2.1.1 Data Completeness\nLet’s do a check on missing values:\n\ncolMeans(is.na(MC2_nodes))\n\n        id shpcountry rcvcountry \n 0.0000000  0.3322281  0.1320734 \n\ncolMeans(is.na(MC2_edges))\n\n          source           target      arrivaldate valueofgoods_omu \n     0.000000000      0.000000000      0.000000000      0.999709708 \n       volumeteu         weightkg  valueofgoodsusd           hscode \n     0.001106395      0.000000000      0.036357661      0.000000000 \n\n\nHere, we can see that some attributes have a very high proportion of missing values: shpcountry (33%) and valueofgoods_omu (99.9%). Let’s just bear this in mind for now."
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#shipments",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#shipments",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "4.2 Shipments",
    "text": "4.2 Shipments\n\n4.2.1 Number of shipments over time\n\n\nShow Code\nggplot(MC2_edges %&gt;% \n         group_by(arrivalmonthyear=floor_date(arrivaldate, unit ='month')) %&gt;% \n         summarise(count = n(), \n                   totalvalue_omu = sum(valueofgoods_omu, na.rm = TRUE),\n                   totalvalue_usd = sum(valueofgoodsusd, na.rm = TRUE)),\n       aes(x=arrivalmonthyear)) +\n  scale_x_date(name = 'Arrival', date_breaks = 'year', date_minor_breaks = 'month', date_labels = '%Y') +\n  scale_y_continuous(name = 'No. of Shipments', labels = scales::comma) +\n  geom_line(aes(y=count)) +\n  # geom_line(aes(y=totalvalue_omu), color='red') +\n  # geom_line(aes(y=totalvalue_usd), color='blue') +\n  labs(title = \"Total number of shipments over time\")\n\n\n\n\n\n\n\n4.2.2 Total value of shipments over time\nWe can see that data for the value of shipments in OMU is only available for a short period in 2034-2035. In contrast value of shipments in USD is available throughout the period, and displays seasonality as well as an overall upward trend. The seasonality is probably to be expected since fishing is seasonally affected.\n\n\nShow Code\nggplot(MC2_edges %&gt;% \n         group_by(arrivalmonthyear=floor_date(arrivaldate, unit ='month')) %&gt;% \n         summarise(count = n(), \n                   totalvalue_omu = sum(valueofgoods_omu, na.rm = TRUE),\n                   totalvalue_usd = sum(valueofgoodsusd, na.rm = TRUE)) %&gt;%\n         pivot_longer(c(totalvalue_omu, totalvalue_usd), names_to = \"currency\", values_to = \"valueofgoods\") %&gt;%\n         mutate(valueofgoods = na_if(valueofgoods, 0)),\n       aes(x=arrivalmonthyear,\n           color=currency)) +\n  scale_x_date(name = 'Arrival', date_breaks = 'year', date_minor_breaks = 'month', date_labels = '%Y') +\n  scale_y_sqrt(name = 'Value', labels = scales::label_comma(suffix = \"M\", scale=1e-6)) +\n  geom_line(aes(y=valueofgoods)) +\n  scale_color_discrete(name = 'Currency', labels = c('OMU', 'USD')) +\n  # geom_line(aes(y=count)) +\n  # geom_line(aes(y=totalvalue_omu), color='red') +\n  # geom_line(aes(y=totalvalue_usd), color='blue') +\n  labs(title = \"Total value of shipments over time\",\n       subtitle = \"Note: value axis uses a square-root scale.\")\n\n\n\n\n\n\n\n4.2.3 Relationship between shipment value and size\nA log-log plot of shipment value (in USD) against shipment weight (in kg) shows an almost straight line, indicating a power relationship.\n\n\nShow Code\nggplot(MC2_edges %&gt;% drop_na(valueofgoodsusd, weightkg) %&gt;% filter(!valueofgoodsusd==0 & !weightkg==0),\n       aes(x=weightkg,\n           y=valueofgoodsusd)) +\n  geom_point(alpha=0.3) +\n  scale_y_log10() +\n  scale_x_log10()\n\n\n\n\n\n\n\n4.2.4 Aggregating Edges\nNow let’s aggregate the edges (shipments) to reduce the number of edges to work with to a more manageable number:\n\n\nShow Code\nMC2_edges_agg &lt;- MC2_edges %&gt;%\n  group_by(source,target) %&gt;%\n  summarise(shipment_count = n(),\n            arrivaldate_earliest = min(arrivaldate),\n            arrivaldate_latest = max(arrivaldate))\n\nprint(MC2_edges_agg %&gt;% summary())\n\n\n    source             target          shipment_count     arrivaldate_earliest\n Length:35895       Length:35895       Min.   :    1.00   Min.   :2028-01-01  \n Class :character   Class :character   1st Qu.:    1.00   1st Qu.:2028-12-22  \n Mode  :character   Mode  :character   Median :    2.00   Median :2030-07-31  \n                                       Mean   :   15.26   Mean   :2030-11-21  \n                                       3rd Qu.:    8.00   3rd Qu.:2032-08-27  \n                                       Max.   :10876.00   Max.   :2034-12-29  \n arrivaldate_latest  \n Min.   :2028-01-01  \n 1st Qu.:2030-01-09  \n Median :2032-01-09  \n Mean   :2031-12-07  \n 3rd Qu.:2033-12-17  \n Max.   :2034-12-30  \n\n\nWe still have close to 36,000 edges after aggregation. Let’s examine the distribution of shipment counts:\n\n\nShow Code\nMC2_edges_agg %&gt;%\n  ggplot(aes(x=shipment_count)) +\n  geom_histogram(binwidth=20)\n\n\n\n\n\nClearly, the vast majority of edges have very low shipment counts. Let’s eliminate these low-count edges and focus our attention on more ‘active’ relationships:\n\n\nShow Code\nMC2_edges_agg %&lt;&gt;%\n  filter(shipment_count &gt; 20)\n\nprint(MC2_edges_agg %&gt;% summary())\n\n\n    source             target          shipment_count    arrivaldate_earliest\n Length:4157        Length:4157        Min.   :   21.0   Min.   :2028-01-01  \n Class :character   Class :character   1st Qu.:   29.0   1st Qu.:2028-02-27  \n Mode  :character   Mode  :character   Median :   44.0   Median :2029-01-01  \n                                       Mean   :  101.3   Mean   :2029-08-23  \n                                       3rd Qu.:   88.0   3rd Qu.:2030-10-11  \n                                       Max.   :10876.0   Max.   :2034-11-30  \n arrivaldate_latest  \n Min.   :2028-02-24  \n 1st Qu.:2032-04-18  \n Median :2034-04-29  \n Mean   :2033-06-21  \n 3rd Qu.:2034-11-25  \n Max.   :2034-12-30  \n\n\nNow we are left with a much more manageable number of edges, a bit over 4,000."
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#build-graph",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#build-graph",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "4.3 Build Graph",
    "text": "4.3 Build Graph\nLet’s re-extract the nodes and build our new graph:\n\n\nShow Code\nMC2_nodes_extracted &lt;- MC2_nodes %&gt;%\n    filter(id %in% MC2_edges_agg$source | id %in% MC2_edges_agg$target)\n\nMC2_graph_agg &lt;- tbl_graph(nodes = MC2_nodes_extracted,\n                           edges = MC2_edges_agg,\n                           directed = TRUE)\n\n\nA first visual look at the resulting graph:\n\n\nShow Code\nMC2_graph_agg %&gt;%\n  ggraph(layout='fr') +\n  geom_edge_link(aes(width=shipment_count),\n                 alpha=0.2) +\n  scale_edge_width(range = c(0.5,5)) +\n  geom_node_point(size=1) +\n  theme_graph()\n\n\n\n\n\nRightaway, we can see that there is one large connected component in the centre, and many other smaller disconnected components (each of 2-3 nodes). To focus our attention on the largest component, let’s extract just that:\n\n\nShow Code\nMC2_graph_agg %&lt;&gt;%\n  activate(nodes) %&gt;%\n  mutate(group = group_components()) %&gt;%\n  filter(group==1)\n\n\nLet’s see how the graph looks like now:\n\n\nShow Code\nMC2_graph_agg %&gt;%\n ggraph(layout='stress') +\n  geom_edge_link(aes(width=shipment_count),\n                 alpha=0.2) +\n  scale_edge_width(range = c(0.5,5)) +\n  geom_node_point(size=1, color='lightblue') +\n  theme_graph()\n\n\n\n\n\nFrom here on out, we’ll only use this subset of nodes and edges for analysis."
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#centrality",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#centrality",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "5.1 Centrality",
    "text": "5.1 Centrality\nIn networks, it’s common to look at the centrality of nodes as it gives a sense of which nodes are ‘important’ in a network. There are different measures of centrality. Let’s generate centrality statistics for the following:\n\nDegree: both in-degree and out-degree, with both unweighted and weighted variants (reflects number of counterparties and direction/total volume of shipments)\nBetweenness (reflects the importance that nodes play as ‘bridges’ between different parts of the network)\nEigenvector (reflects importance, based on whether other important nodes connect to it)\n\nWe also calculate the ratio of out-degree to in-degree: this will help us characterise whether a company is more of a sender or receiver.\n\n\nShow Code\nMC2_graph_agg %&lt;&gt;%\n  activate(nodes) %&gt;%\n  mutate(deg_o = centrality_degree(mode='out'),\n         wdeg_o = centrality_degree(weights=shipment_count, mode='out'),\n         deg_i = centrality_degree(mode='in'),\n         wdeg_i = centrality_degree(weights=shipment_count, mode='in'),\n         deg_oi_ratio = (deg_o+1)/(deg_i+1),\n         wdeg_oi_ratio = (wdeg_o+1)/(wdeg_i+1),\n         betweenness = centrality_betweenness(normalized = TRUE),\n         eigen = centrality_eigen(weights=shipment_count))\n\ncentralities &lt;- MC2_graph_agg %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble()\n\n\n\n5.1.1 Top companies by different centrality measures\n\n\nShow Code\ntop_centralities &lt;- MC2_graph_agg %&gt;%\n  activate(nodes) %&gt;%\n  as_tibble() %&gt;%\n  pivot_longer(c(deg_o, wdeg_o, deg_i, wdeg_i, betweenness, eigen), names_to='centrality_type', values_to='centrality_value') %&gt;%\n  group_by(centrality_type) %&gt;%\n  top_n(10, centrality_value) %&gt;%\n  ungroup() %&gt;%\n  mutate(r = reorder_within(id, centrality_value, centrality_type))\n\nggplot(top_centralities, aes(x=fct_reorder(r, centrality_value), y=centrality_value, fill=id)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~centrality_type, scales = 'free') +\n  scale_x_reordered(name = \"Companies\") +\n  scale_y_continuous(name = 'Centrality Value') +\n  coord_flip() +\n  labs(title = \"Top 10 Companies by various centrality measures\")\n\n\n\n\n\nAs we would expect, these companies with high centrality scores are generally located in the centre of the network when we draw the network graph using a stress layout:\n\n\nShow Code\nMC2_graph_agg %&gt;%\n  # activate(edges) %&gt;%\n  # filter(shipment_count &gt;200) %&gt;%\n  activate(nodes) %&gt;%\n  mutate(top10_centrality = ifelse(id %in% top_centralities$id, 'Yes', 'No')) %&gt;%\n  # mutate(component = group_components()) %&gt;%\n  filter(group_components()==1) %&gt;%\n ggraph(layout='stress') +\n  geom_edge_link(aes(width=shipment_count),\n                 alpha=0.2) +\n  scale_edge_width(name = 'No. of shipments', range = c(0.5,5)) +\n  geom_node_point(aes(fill=log10(deg_oi_ratio), color=top10_centrality, size=top10_centrality), shape=21, stroke=1) +\n  # scale_size(range = c(1,5)) +\n  # scale_color_discrete(name = 'Top 10 Centrality', direction=-1) +\n  scale_fill_continuous_diverging(palette='Blue-Red 3', guide='none', l1=30, l2=100, p1=0.9, p2=1.2) +\n  scale_size_manual(name = 'Top 10 Centrality', values=c('Yes'=5,'No'=2)) +\n  scale_color_manual(name = 'Top 10 Centrality', values=c('transparent', 'black')) +\n  theme_graph() +\n  labs(title = \"Graph of shipments\",\n       subtitle = \"Colour indicates whether company mostly sends (red) or receives (blue).\\nHigh centrality nodes are indicated by larger size and black border.\")"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#operating-timelines-of-source-companies",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#operating-timelines-of-source-companies",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "6.1 Operating Timelines of Source Companies",
    "text": "6.1 Operating Timelines of Source Companies\nIt was mentioned in the challenge that “companies caught fishing illegally will shut down but will then often start up again under a different name”. Here, I tried to plot the operating timelines of the companies to see if such temporal patterns can be detected. I made an assumption that in such situations, the old and new companies would be similar in scale (shipment values or volumes). Hence I put time on the x-axis and ‘operation scale’ (average) on the y-axis so that companies of similar scale would appear closer together. To avoid clutter, I only plotted the start and end months of operations, each with a different shape. Hence, proximity of two different shapes at roughly the same vertical height could indicate the described pattern.\n\n\nShow Code\nsource_monthly_agg &lt;- MC2_edges %&gt;%\n  group_by(source,\n           arrivalmonthyear=floor_date(arrivaldate, unit ='month')) %&gt;% \n  summarise(count = n(),\n            totalvalue_omu = sum(valueofgoods_omu, na.rm = TRUE),\n            totalvalue_usd = sum(valueofgoodsusd, na.rm = TRUE),\n            totalweight_kg = sum(weightkg, na.rm = TRUE),\n            avgvalue_omu = mean(valueofgoods_omu, na.rm = TRUE),\n            avgvalue_usd = mean(valueofgoodsusd, na.rm = TRUE),\n            avgweight_kg = mean(weightkg, na.rm = TRUE))\n\nsource_earliest_latest &lt;- source_monthly_agg %&gt;%\n  group_by(source) %&gt;%\n  summarise(arrivalmonthyear_earliest = min(arrivalmonthyear),\n            arrivalmonthyear_latest = max(arrivalmonthyear)) %&gt;%\n  pivot_longer(c(arrivalmonthyear_earliest, arrivalmonthyear_latest),\n               names_to = 'arrivalmonthyear_type',\n               values_to = 'arrivalmonthyear')\n\nsource_agg_earliest_latest &lt;- source_monthly_agg %&gt;%\n  inner_join(source_earliest_latest,\n              by = join_by(source, arrivalmonthyear)) \n\n\n\n\nShow Code\nsource_agg_earliest_latest %&gt;%\n  filter(avgweight_kg &lt; 20e6) %&gt;%\nggplot(aes(x=arrivalmonthyear,\n           y=avgweight_kg,\n           group=source,\n           color=source)) +\n  geom_line(alpha=0.1) +\n  geom_point(aes(shape=arrivalmonthyear_type)) +\n  # geom_point(data=source_agg_earliest_latest) +\n  scale_x_date(name = 'Arrival', date_breaks = 'year', date_minor_breaks = 'month', date_labels = '%Y') +\n  scale_y_continuous(name = 'Average Shipment Weight (kg)',  labels = scales::label_comma(suffix = \"M\", scale=1e-6)) +\n  scale_color_discrete(guide='none') +\n  scale_shape_manual(name = 'Event', labels = c('First Shipment', 'Last Shipment'), values = c(1,4)) +\n  facet_wrap(~ cut_number(avgweight_kg, 6), ncol = 1, scales = 'free')\n\n\n\n\n\nShow Code\n  # theme(legend.position = 'none')"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#day-of-week-activity",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#day-of-week-activity",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "6.2 Day-of-Week Activity",
    "text": "6.2 Day-of-Week Activity\nHere, I wondered if companies who engage in illegal fishing might be trying to do so on certain days of the week with less shipments to lessen the chance of getting caught. Hence, I decided to examine the number of companies operating shipments by days of the week:\n\n\nShow Code\nMC2_edges %&gt;%\n  mutate(weekday = wday(arrivaldate, week_start = 1, label = TRUE)) %&gt;%\n  mutate(year = year(arrivaldate)) %&gt;%\n  group_by(weekday) %&gt;%\n  summarise(shipments = n_distinct(source)) %&gt;%\n  ggplot(aes(y=weekday,\n             x=shipments)) +\n  geom_col() +\n  scale_y_discrete(name = 'Day of Week') +\n  scale_x_continuous(name = 'Number of companies') +\n  labs(title = \"Number of companies operating by day of week\",\n       subtitle = \"There are overall fewer shipments on 'Wed' and 'Thu' compared to other days\")\n\n\n\n\n\nIt seems that there are fewer companies operating on ‘Wed’ and ‘Thu’ compared to the other days of the week. (Note that since the dates given in the data are fictitious, it might not really be Wed and Thu; they could well be Sat and Sun, i.e. the weekend.)"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#ego-networks",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#ego-networks",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "7.1 Ego Networks",
    "text": "7.1 Ego Networks\n\n\nShow Code\nMC2_graph_agg %&gt;%\n  convert(to_local_neighborhood,\n          node = which(.N()$id == 'Selous Game Reserve  S.A. de C.V.'),\n          order = 1,\n          mode = 'all') %&gt;%\n  activate(nodes) %&gt;%\n  mutate(color = ifelse(id %in% top_centralities$id, 'high centrality', 'others')) %&gt;%\n  ggraph(layout='fr') +\n  geom_edge_link(aes(width=shipment_count, alpha=..index..),\n                 ) +\n  scale_edge_width(range = c(0.5,5)) +\n  scale_edge_alpha('Edge direction', guide = 'edge_direction') +\n  geom_node_point(aes(size=5, color=color)) +\n  scale_size(range = c(0.5,5)) +\n  theme_graph()"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#shipments-among-high-centrality-nodes",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#shipments-among-high-centrality-nodes",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "7.2 Shipments among high centrality nodes",
    "text": "7.2 Shipments among high centrality nodes\n\n\nShow Code\nMC2_graph_agg %&gt;%\n  activate(nodes) %&gt;%\n  filter(id %in% top_centralities$id) %&gt;%\n  ggraph(layout='stress') +\n  geom_edge_link(aes(width=shipment_count),\n                 alpha=0.2) +\n  scale_edge_width(range = c(0.5,5)) +\n  geom_node_point(size=1, color='lightblue') +\n  theme_graph()"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#bundles-data",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#bundles-data",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "7.3 Bundles data",
    "text": "7.3 Bundles data"
  },
  {
    "objectID": "take_home_ex/take_home_ex_02/take_home_ex_02.html#high-centrality-nodes",
    "href": "take_home_ex/take_home_ex_02/take_home_ex_02.html#high-centrality-nodes",
    "title": "Take-Home Exercise 2: VAST Challenge 2023, Mini-Challenge 2",
    "section": "6.3 High-Centrality Nodes",
    "text": "6.3 High-Centrality Nodes\nLet’s examine the temporal patterns of the high-centrality nodes in greater detail.\n\n\nShow Code\nshipment_send &lt;- MC2_edges %&gt;%\n  group_by(source,\n           arrivalmonthyear=floor_date(arrivaldate, unit ='month')) %&gt;%\n  summarise(shipment_count = n(),\n            totalvalue_usd = sum(valueofgoodsusd, na.rm = TRUE),\n            totalweight_kg = sum(weightkg, na.rm = TRUE)) %&gt;%\n  mutate(shipment_count_type = 'send') %&gt;%\n  rename(id = source)\n\nshipment_receive &lt;- MC2_edges %&gt;%\n  group_by(target,\n           arrivalmonthyear=floor_date(arrivaldate, unit ='month')) %&gt;%\n  summarise(shipment_count = n(),\n            totalvalue_usd = sum(valueofgoodsusd, na.rm = TRUE),\n            totalweight_kg = sum(weightkg, na.rm = TRUE)) %&gt;%\n  mutate(shipment_count_type = 'receive') %&gt;%\n  rename(id = target)\n\n# test3 &lt;- test %&gt;%\n#   full_join(test2,\n#             by = join_by(source==target, arrivalmonthyear==arrivalmonthyear))\n\nshipment_all &lt;- union(shipment_send, shipment_receive)\n\n\n\n6.3.1 High Betweenness\nWe can see something interesting with the nodes having the top 5 betweenness centrality. They all consistently send and receive shipments throughout the months, so may be playing roles as forwarders or transshipment providers. The differences between number of shipments sent and received are fairly big. Two of them receive a lot more shipments than they send, while the third is the opposite.\n\n\nShow Code\ntop_ids &lt;- top_centralities %&gt;%\n  filter(centrality_type=='betweenness') %&gt;%\n  top_n(3, centrality_value) %&gt;%\n  pull(id)\n\nshipment_all %&gt;% \n  filter(id %in% top_ids) %&gt;%\n  ggplot(aes(x=arrivalmonthyear,\n             y=shipment_count)) +\n  geom_line(aes(colour=id, linetype=shipment_count_type)) +\n  scale_x_date(name = 'Arrival', date_breaks = 'year', date_minor_breaks = 'month', date_labels = '%Y') +\n  scale_colour_discrete() +\n  labs(title = \"Shipments sent and received over time by top 3 companies with highest betweenness\") +\n  theme_minimal()\n\n\n\n\n\n\n\n6.3.2 High In-Degree\nIn contrast with the high betweenness nodes, the top 3 companies with highest in-degree almost only exclusively receive shipments. This profile suggests they may be wholesalers or purchasers.\n\n\nShow Code\ntop_ids &lt;- top_centralities %&gt;%\n  filter(centrality_type=='wdeg_i') %&gt;%\n  top_n(3, centrality_value) %&gt;%\n  pull(id)\n\nshipment_all %&gt;% \n  filter(id %in% top_ids) %&gt;%\n  ggplot(aes(x=arrivalmonthyear,\n             y=shipment_count)) +\n  geom_line(aes(colour=id, linetype=shipment_count_type)) +\n  scale_x_date(name = 'Arrival', date_breaks = 'year', date_minor_breaks = 'month', date_labels = '%Y') +\n  scale_colour_discrete() +\n  labs(title = \"Shipments sent and received over time for top 3 companies with highest in-degree\") +\n  theme_minimal()\n\n\n\n\n\n\n\n6.3.3 High Out-Degree\nAs expected, the opposite is observed from the top 3 companies with highest out-degree: they almost only exclusively send shipments (except for one, which had a very low volume of receiving shipments during 2028-2033). This profile suggests they may be the actual fishing companies.\n\n\nShow Code\ntop_ids &lt;- top_centralities %&gt;%\n  filter(centrality_type=='wdeg_o') %&gt;%\n  top_n(3, centrality_value) %&gt;%\n  pull(id)\n\nshipment_all %&gt;% \n  filter(id %in% top_ids) %&gt;%\n  ggplot(aes(x=arrivalmonthyear,\n             y=shipment_count)) +\n  geom_line(aes(colour=id, linetype=shipment_count_type)) +\n  scale_x_date(name = 'Arrival', date_breaks = 'year', date_minor_breaks = 'month', date_labels = '%Y') +\n  scale_colour_discrete() +\n  labs(title = \"Shipments sent and received over time for top 3 companies with highest out-degree\") +\n  theme_minimal()\n\n\n\n\n\n\n\n6.3.4 High Eigenvector Centrality\nOf the top 3 companies with highest eigenvector centrality, two are the same as top 3 with highest out-degree. No immediate inferences can be drawn, more study is required.\n\n\nShow Code\ntop_ids &lt;- top_centralities %&gt;%\n  filter(centrality_type=='eigen') %&gt;%\n  top_n(3, centrality_value) %&gt;%\n  pull(id)\n\nshipment_all %&gt;% \n  filter(id %in% top_ids) %&gt;%\n  ggplot(aes(x=arrivalmonthyear,\n             y=shipment_count)) +\n  geom_line(aes(colour=id, linetype=shipment_count_type)) +\n  scale_x_date(name = 'Arrival', date_breaks = 'year', date_minor_breaks = 'month', date_labels = '%Y') +\n  scale_colour_discrete() +\n  labs(title = \"Shipments sent and received over time for top 3 companies with highest eigenvector centrality\") +\n  theme_minimal()\n\n\n\n\n\n\n\n6.3.5 Day-of-Week Comparison Between High-Centrality Nodes\nThis heatmap shows the number of shipments sent and received by high-centrality nodes (on any measure) broken down by days of the week. It distinctly shows that for about 3/4 of the companies, they primarily send or receive but not both. For the remaining companies though, they send and receive roughly the same number of shipments throughout a week.\n\n\nShow Code\ntop_ids &lt;- top_centralities %&gt;%\n  pull(id) %&gt;%\n  unique()\n\nsend_weekdays &lt;- MC2_edges %&gt;%\n  mutate(weekday = wday(arrivaldate, week_start = 1, label = TRUE)) %&gt;%\n  filter(source %in% top_ids) %&gt;%\n  count(source, weekday) %&gt;%\n  arrange(desc(tolower(source)), weekday) %&gt;%\n  mutate(shipment_type = 'send') %&gt;%\n  rename(company = source)\n\nreceive_weekdays &lt;- MC2_edges %&gt;%\n  mutate(weekday = wday(arrivaldate, week_start = 1, label = TRUE)) %&gt;%\n  filter(target %in% top_ids) %&gt;%\n  count(target, weekday) %&gt;%\n  arrange(desc(tolower(target)), weekday) %&gt;%\n  mutate(shipment_type = 'receive') %&gt;%\n  rename(company = target)\n\nsend_receive_weekdays &lt;- union(send_weekdays, receive_weekdays) %&gt;%\n  mutate(across(shipment_type, as.factor))\n\nggplot(send_receive_weekdays,\n       aes(x=weekday, \n           y=fct_inorder(company),\n           fill=n)) +\ngeom_tile(color = \"white\",\n        size = 0.1) +\ncoord_equal() +\nscale_x_discrete(position = 'top') +\nscale_fill_gradient(name = \"# of shipments\",\n                  low = \"light blue\",\n                  high = \"dark blue\") +\ntheme(axis.ticks = element_blank(),\n      panel.grid = element_blank(),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    legend.title = element_text(size = 8),\n    legend.text = element_text(size = 6)\n    ) +\nlabs(title = \"Number of Shipments Sent/Received by High Centrality Nodes per Day of Week\",\n     subtitle = \"Note: Day of week may not be true value due to use of fictitious dates, but relative order should be correct.\",\n     x = \"Day of Week\",\n     y = \"Company\") +\n  facet_wrap(~fct_rev(shipment_type))"
  },
  {
    "objectID": "take_home_ex/take_home_ex_03/take_home_ex_03.html",
    "href": "take_home_ex/take_home_ex_03/take_home_ex_03.html",
    "title": "Take-Home Exercise 3: VAST Challenge 2023, Mini-Challenge 3",
    "section": "",
    "text": "Show Code\n# pacman::p_load(jsonlite, readxl, fuzzyjoin, igraph, tidygraph, tidytext, ggraph, patchwork, GGally,\n#                visNetwork, lubridate, clock, janitor,\n#                tidyverse, magrittr, graphlayouts)\n\n\n\n\nShow Code\n# #| code-fold: false\n# MC3 <- fromJSON('data/MC3.json')\n\n\n\n# MC3_nodes <- as_tibble(MC3$nodes) %>%\n#   distinct() %>%\n#   mutate(across(c(id, country, product_services, type), as.character)) %>%\n#   mutate(revenue_omu = as.numeric(as.character(revenue_omu))) %>%\n#   relocate(id) \n# \n# MC3_edges <- as_tibble(MC3$links) %>%\n#   distinct() %>%\n#   mutate(across(c(source, target, type), as.character)) %>%\n#   relocate(source, target) \n# \n# MC3_graph <- tbl_graph(nodes = MC3_nodes,\n#                        edges = MC3_edges,\n#                        directed = FALSE)\n\n\n\nShow Code\n# MC3_nodes %>%\n#   ggplot(aes(x=type,\n#              y=after_stat(count))) +\n#   geom_bar()\n\n\n\n\nShow Code\n# tidy_nodes <- MC3_nodes %>%\n#   unnest_tokens(word, product_services,\n#                 to_lower = TRUE,\n#                 strip_punct = TRUE) %>%\n#   filter(! word %in% tidytext::stop_words$word) %>%\n#   filter(! word %in% c('character','0'))"
  }
]