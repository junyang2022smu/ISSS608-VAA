---
title: "Hands-On Exercise 6: Multivariate Analysis"
author: "Yang Jun"
date: 18 May 2023
date-modified: "`r Sys.Date()`"
execute:
  echo: true
  eval: true
  warning: false
number-sections: true
---

In this Hands-On Exercise, we explore different visual analytics tools and techniques for multidimensional data.

# Visual Correlation Analysis

## Preparation

### Install and launch R packages

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse)
```

### Import and prepare dataset

```{r}
wine <- read_csv("data/wine_quality.csv")
```

## Correlation Visualisation Methods

### Scatterplot matrix using `pairs()` method

```{r, fig.height=6}

panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
  usr <- par("usr")
  on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  r <- abs(cor(x, y, use="complete.obs"))
  txt <- format(c(r, 0.123456789), digits=digits)[1]
  txt <- paste(prefix, txt, sep="")
  if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
  text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[1:12],
      upper.panel = panel.cor) # option to hide the upper triangle or display correlation coefficient
```

### Correlogram using `ggcormat()` method

```{r, fig.width=10}
ggstatsplot::ggcorrmat(data=wine,
                       cor.vars = 1:11,
                       ggcorrplot.args = list(outline.color='black',
                                              hc.order = TRUE,
                                              tl.cex = 10),
                       title = "Correlogram for Wine dataset",
                       subtitle = "Four pairs are not significant at p < 0.05")
```

Grouped correlogram (by type):

```{r, fig.width=20, fig.height=10}
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```

### Correlogram using `corrplot` package

```{r}
# Need to compute correlation matrix in R first
wine.cor <- cor(wine[1:11])
wine.sig = cor.mtest(wine.cor, conf.level = 0.95)

corrplot(wine.cor,
         method = 'ellipse',
         type = 'lower',
         diag = FALSE,
         tl.col = 'black',
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = 0.05)
```

Adding additional info to upper triangle:

```{r, fig.width = 10}
corrplot.mixed(wine.cor,
               lower = 'ellipse',
               upper = 'number',
               tl.pos = 'lt',
               diag = 'l',
               order = 'AOE',
               tl.col = 'black')
```

Drawing rectangles based on hierarchical clustering:

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```

# Ternary Plots

## Preparation

### Install and launch R packages

```{r}
pacman::p_load(plotly, tidyverse)
```

```{r}
library(ggtern)
```

### Import and prepare dataset

```{r}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

```{r}
#Deriving the young, economy active and old measures
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

## Static Ternary Plot

```{r}
ggtern(data = agpop_mutated,
       aes(x=YOUNG,
           y=ACTIVE,
           z=OLD)) +
  geom_point() +
  labs(title = "Population structure, 2018") +
  theme_rgbw()
```

## Interactive Ternary Plot

```{r}
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  text = ~SZ,
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```

# Heatmaps

## Preparation

### Install and launch R packages

```{r}
pacman::p_load(seriation, dendextend, heatmaply, tidyverse)
```

### Import and prepare dataset

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

```{r}
row.names(wh) <- wh$Country
```

```{r}
wh1 <- wh %>%
  select(c(3, 7:12))

wh_matrix <- data.matrix(wh)
```

## Static Heatmaps

### `heatmap()` of R Stats

#### Basic (no clustering)

```{r}
wh_heatmap <- heatmap(wh_matrix,
                      Rowv=NA, Colv=NA)
```

#### With clustering and scaling

```{r}
wh_heatmap <- heatmap(wh_matrix,
                      scale="column",
                      cexRow = 0.6, 
                      cexCol = 0.8,
                      margins = c(10, 4))
```

## Interactive Heatmaps using `heatmaply` package

### Basic

```{r}
heatmaply(wh_matrix[, -c(1,2,4,5)],
          scale = 'column')
```

### Normalised

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="World Happiness Score and Variables by Country, 2018 \nDataTransformation using Normalise Method",
          xlab = "World Happiness Indicators",
          ylab = "World Countries"
          )
```

# Parallel Coordinates

## Preparation

### Install and launch R packages

```{r}
pacman::p_load(GGally, parallelPlot, tidyverse)
```

### Import and prepare dataset

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

## Static Parallel Coordinates Plot

### Basic

```{r, fig.width=12}
ggparcoord(data = wh, 
           columns = c(7:12))
```

### With added boxplot

```{r, fig.width=15, fig.height=8}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Parallel Coordinates Plot of World Happines Variables")
```

### With facet

```{r, fig.width=15, fig.height=8}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happiness Variables by Region") +
  facet_wrap(~ Region) +
  theme(axis.text.x = element_text(angle=30, hjust=1))
```

## Interactive Parallel Coordinates Plot

```{r}
parallelPlot(select(wh, "Happiness score", c(7:12)),
             width = 320,
             height = 350,
             continuousCS = 'YlOrRd',
             rotateTitle = TRUE,
             histoVisibility = rep(TRUE, 7))
```

# Treemaps

## Preparation

### Install and launch R packages

```{r}
pacman::p_load(treemap, treemapify, tidyverse) 
```

### Import and prepare dataset

```{r}
realis2018 <- read_csv("data/realis2018.csv")
```

```{r}
realis2018_summarised <- realis2018 %>%
  group_by(`Project Name`, `Planning Region`, `Planning Area`, `Property Type`, `Type of Sale`) %>%
  summarise(`Total Units Sold` = sum(`No. of Units`, na.rm = TRUE),
            `Total Area (sqm)` = sum(`Area (sqm)`, na.rm = TRUE),
            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),
            `Median Transacted Price ($)` = median(`Transacted Price ($)`, na.rm = TRUE))
```

## Static Treemaps

```{r}
realis2018_selected <- realis2018_summarised %>%
  filter(`Property Type` == 'Condominium', `Type of Sale` == 'Resale')
```

### Using `treemap` package

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Units Sold",
        vColor="Median Unit Price ($ psm)",
        type = "value", # default is "index", which colors by hierarchy
        palette = "RdYlBu",
        sortID = "Median Transacted Price ($)",
        title="Resale Condominium by Planning Region and Area, 2018",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

#### Changing the layout

```{r}
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Units Sold",
        vColor="Median Unit Price ($ psm)",
        type = "manual", # default is "index", which colors by hierarchy
        palette = "Blues",
        algorithm = "squarified", # default is "pivotSize"
        title="Resale Condominium by Planning Region and Area, 2018",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

### Using `treemapify` package

#### Basic

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Units Sold`,
           fill = `Median Unit Price ($ psm)`),
       layout = "scol",
       start = "bottomleft") + 
  geom_treemap() +
  scale_fill_gradient(low = "light blue", high = "blue")
```

#### Adding hierarchy

```{r}
ggplot(data=realis2018_selected, 
       aes(area = `Total Units Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`),
       start = "topleft") + 
  geom_treemap() +
  geom_treemap_subgroup2_border(colour='gray70', size=2) +
  geom_treemap_subgroup_border(colour='white') # note reverse order of plotting 
```

## Interactive Treemaps using `d3treeR`

```{r}
library(d3treeR)
```

```{r}
tm <- treemap(realis2018_summarised,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Units Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        title="Private Residential Property Sold, 2018",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

```{r}
d3tree(tm, rootname = "Singapore")
```
